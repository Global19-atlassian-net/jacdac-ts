{
  "name": "Common registers and commands",
  "status": "experimental",
  "shortId": "_system",
  "camelName": "system",
  "shortName": "system",
  "extends": [],
  "notes": {
    "short": "This file describes common register and command codes.\nThese are defined in ranges separate from the per-service ones.\nNo service actually derives from this file, but services can include packets\ndefined here.\nTheir code is listed as say `@ intensity` and not `@ 0x01` (the spectool enforces that).",
    "commands": "Command codes are subdivided as follows:\n* Commands `0x000-0x07f` - common to all services\n* Commands `0x080-0xeff` - defined per-service\n* Commands `0xf00-0xfff` - reserved for implementation\n\nCommands follow.",
    "registers": "Register codes are subdivided as follows:\n* Registers `0x001-0x07f` - r/w common to all services\n* Registers `0x080-0x0ff` - r/w defined per-service\n* Registers `0x100-0x17f` - r/o common to all services\n* Registers `0x180-0x1ff` - r/o defined per-service\n* Registers `0x200-0xeff` - custom, defined per-service\n* Registers `0xf00-0xfff` - reserved for implementation, should not be seen on the wire\n\nThe types listed are typical. Check spec for particular service for exact type,\nand a service-specific name for a register (eg. `value` could be `pulse_length`).\nAll registers default to `0` unless otherwise indicated.",
    "events": "Command codes are subdivided as follows:\n* Commands `0x000-0x07f` - common to all services\n* Commands `0x080-0xeff` - defined per-service\n* Commands `0xf00-0xfff` - reserved for implementation"
  },
  "classIdentifier": 536870897,
  "enums": {},
  "packets": [
    {
      "kind": "command",
      "name": "announce",
      "identifier": 0,
      "description": "Enumeration data for control service; service-specific advertisement data otherwise.\nControl broadcasts it automatically every 500ms, but other service have to be queried to provide it.",
      "fields": [],
      "hasReport": true
    },
    {
      "kind": "report",
      "name": "announce",
      "identifier": 0,
      "description": "Enumeration data for control service; service-specific advertisement data otherwise.\nControl broadcasts it automatically every 500ms, but other service have to be queried to provide it.",
      "fields": [],
      "secondary": true
    },
    {
      "kind": "command",
      "name": "get_register",
      "identifier": 4096,
      "description": "Registers number `N` is fetched by issuing command `0x1000 | N`.\nThe report format is the same as the format of the register.",
      "fields": [],
      "hasReport": true
    },
    {
      "kind": "report",
      "name": "get_register",
      "identifier": 4096,
      "description": "Registers number `N` is fetched by issuing command `0x1000 | N`.\nThe report format is the same as the format of the register.",
      "fields": [],
      "secondary": true
    },
    {
      "kind": "command",
      "name": "set_register",
      "identifier": 8192,
      "description": "Registers number `N` is set by issuing command `0x2000 | N`, with the format\nthe same as the format of the register.",
      "fields": []
    },
    {
      "kind": "report",
      "name": "event",
      "identifier": 1,
      "description": "Event from sensor or a broadcast service.",
      "fields": [
        {
          "name": "event_id",
          "unit": "",
          "isFloat": false,
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        },
        {
          "name": "event_argument",
          "unit": "",
          "isFloat": false,
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        }
      ],
      "packFormat": "u32 u32"
    },
    {
      "kind": "command",
      "name": "calibrate",
      "identifier": 2,
      "description": "Request to calibrate a sensor. The report indicates the calibration is done.",
      "fields": [],
      "hasReport": true
    },
    {
      "kind": "report",
      "name": "calibrate",
      "identifier": 2,
      "description": "Request to calibrate a sensor. The report indicates the calibration is done.",
      "fields": [],
      "secondary": true
    },
    {
      "kind": "rw",
      "name": "intensity",
      "identifier": 1,
      "description": "This is either binary on/off (0 or non-zero), or can be gradual (eg. brightness of an RGB LED strip).",
      "fields": [
        {
          "name": "_",
          "unit": "",
          "isFloat": false,
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        }
      ],
      "packFormat": "u32"
    },
    {
      "kind": "rw",
      "name": "value",
      "identifier": 2,
      "description": "The primary value of actuator (eg. servo pulse length, or motor duty cycle).",
      "fields": [
        {
          "name": "_",
          "unit": "",
          "isFloat": false,
          "type": "i32",
          "storage": -4,
          "isSimpleType": true
        }
      ],
      "packFormat": "i32"
    },
    {
      "kind": "rw",
      "name": "max_power",
      "identifier": 7,
      "description": "Limit the power drawn by the service, in mA.",
      "fields": [
        {
          "name": "_",
          "unit": "mA",
          "isFloat": false,
          "type": "u16",
          "storage": 2,
          "isSimpleType": true,
          "defaultValue": 500,
          "typicalMax": 500,
          "typicalMin": 0
        }
      ],
      "packFormat": "u16"
    },
    {
      "kind": "rw",
      "name": "streaming_samples",
      "identifier": 3,
      "description": "Asks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).",
      "fields": [
        {
          "name": "_",
          "unit": "",
          "isFloat": false,
          "type": "u8",
          "storage": 1,
          "isSimpleType": true
        }
      ],
      "packFormat": "u8"
    },
    {
      "kind": "rw",
      "name": "streaming_interval",
      "identifier": 4,
      "description": "Period between packets of data when streaming in milliseconds.",
      "fields": [
        {
          "name": "_",
          "unit": "ms",
          "isFloat": false,
          "type": "u32",
          "storage": 4,
          "isSimpleType": true,
          "defaultValue": 100
        }
      ],
      "packFormat": "u32"
    },
    {
      "kind": "ro",
      "name": "reading",
      "identifier": 257,
      "description": "Read-only value of the sensor, also reported in streaming.",
      "fields": [
        {
          "name": "_",
          "unit": "",
          "isFloat": false,
          "type": "i32",
          "storage": -4,
          "isSimpleType": true
        }
      ],
      "packFormat": "i32"
    },
    {
      "kind": "rw",
      "name": "low_threshold",
      "identifier": 5,
      "description": "Thresholds for event generation for event generation for analog sensors.",
      "fields": [
        {
          "name": "_",
          "unit": "",
          "isFloat": false,
          "type": "i32",
          "storage": -4,
          "isSimpleType": true
        }
      ],
      "packFormat": "i32"
    },
    {
      "kind": "rw",
      "name": "high_threshold",
      "identifier": 6,
      "description": "Thresholds for event generation for event generation for analog sensors.",
      "fields": [
        {
          "name": "_",
          "unit": "",
          "isFloat": false,
          "type": "i32",
          "storage": -4,
          "isSimpleType": true
        }
      ],
      "packFormat": "i32"
    },
    {
      "kind": "ro",
      "name": "status_code",
      "identifier": 7,
      "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
      "fields": [
        {
          "name": "code",
          "unit": "",
          "isFloat": false,
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "vendor_code",
          "unit": "",
          "isFloat": false,
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "packFormat": "u16 u16"
    },
    {
      "kind": "const",
      "name": "streaming_preferred_interval",
      "identifier": 258,
      "description": "Preferred default streaming interval for sensor in milliseconds.",
      "fields": [
        {
          "name": "_",
          "unit": "ms",
          "isFloat": false,
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        }
      ],
      "packFormat": "u32"
    },
    {
      "kind": "event",
      "name": "change",
      "identifier": 2,
      "description": "Emit notifying that the internal state of the service changed.",
      "fields": []
    }
  ],
  "source": "# Common registers and commands\n\n    camel: system\n\nThis file describes common register and command codes.\nThese are defined in ranges separate from the per-service ones.\nNo service actually derives from this file, but services can include packets\ndefined here.\nTheir code is listed as say `@ intensity` and not `@ 0x01` (the spectool enforces that).\n\n## Commands\n\nCommand codes are subdivided as follows:\n* Commands `0x000-0x07f` - common to all services\n* Commands `0x080-0xeff` - defined per-service\n* Commands `0xf00-0xfff` - reserved for implementation\n\nCommands follow.\n\n    command announce @ 0x00 { }\n    report { ... }\n\nEnumeration data for control service; service-specific advertisement data otherwise.\nControl broadcasts it automatically every 500ms, but other service have to be queried to provide it.\n\n    command get_register @ 0x1000 {}\n    report { ... }\n\nRegisters number `N` is fetched by issuing command `0x1000 | N`.\nThe report format is the same as the format of the register.\n\n    command set_register @ 0x2000 { ... }\n\nRegisters number `N` is set by issuing command `0x2000 | N`, with the format\nthe same as the format of the register.\n\n    report event @ 0x01 {\n        event_id: u32\n        event_argument: u32\n    }\n\nEvent from sensor or a broadcast service. \n\n    command calibrate @ 0x02 { }\n    report { }\n\nRequest to calibrate a sensor. The report indicates the calibration is done.\n\n## Registers\n\nRegister codes are subdivided as follows:\n* Registers `0x001-0x07f` - r/w common to all services\n* Registers `0x080-0x0ff` - r/w defined per-service\n* Registers `0x100-0x17f` - r/o common to all services\n* Registers `0x180-0x1ff` - r/o defined per-service\n* Registers `0x200-0xeff` - custom, defined per-service\n* Registers `0xf00-0xfff` - reserved for implementation, should not be seen on the wire\n\nThe types listed are typical. Check spec for particular service for exact type,\nand a service-specific name for a register (eg. `value` could be `pulse_length`).\nAll registers default to `0` unless otherwise indicated.\n\n    rw intensity: u32 @ 0x01\n\nThis is either binary on/off (0 or non-zero), or can be gradual (eg. brightness of an RGB LED strip).\n\n    rw value: i32 @ 0x02\n\nThe primary value of actuator (eg. servo pulse length, or motor duty cycle).\n\n    rw max_power = 500: u16 mA {typical_max = 500} @ 0x07\n\nLimit the power drawn by the service, in mA.\n\n    rw streaming_samples: u8 @ 0x03\n\nAsks device to stream a given number of samples\n(clients will typically write `255` to this register every second or so, while streaming is required).\n\n    rw streaming_interval = 100: u32 ms @ 0x04\n\nPeriod between packets of data when streaming in milliseconds.\n\n    ro reading: i32 @ 0x101\n\nRead-only value of the sensor, also reported in streaming.\n\n    rw low_threshold: i32 @ 0x05\n    rw high_threshold: i32 @ 0x06\n\nThresholds for event generation for event generation for analog sensors.\n\n    ro status_code @ 0x7 {\n        code: u16\n        vendor_code: u16\n    }\n\nReports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.\n\n    const streaming_preferred_interval: u32 ms @ 0x102\n\nPreferred default streaming interval for sensor in milliseconds.\n\n## Events\n\nCommand codes are subdivided as follows:\n* Commands `0x000-0x07f` - common to all services\n* Commands `0x080-0xeff` - defined per-service\n* Commands `0xf00-0xfff` - reserved for implementation\n\n    event change @ 0x02 { }\n\nEmit notifying that the internal state of the service changed."
}