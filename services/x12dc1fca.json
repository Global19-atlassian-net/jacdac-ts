{
  "name": "Logger",
  "status": "experimental",
  "shortId": "logger",
  "camelName": "Logger",
  "shortName": "Logger",
  "extends": [
    "_base"
  ],
  "notes": {
    "short": "A service which can report messages to the bus."
  },
  "classIdentifier": 316415946,
  "enums": {
    "Priority": {
      "name": "Priority",
      "storage": 1,
      "members": {
        "Debug": 0,
        "Log": 1,
        "Warning": 2,
        "Error": 3
      }
    }
  },
  "packets": [
    {
      "kind": "ro",
      "name": "status_code",
      "identifier": 7,
      "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
      "fields": [
        {
          "name": "code",
          "unit": "",
          "isFloat": false,
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "vendor_code",
          "unit": "",
          "isFloat": false,
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "optional": true,
      "identifierName": "status_code",
      "derived": "_base"
    },
    {
      "kind": "rw",
      "name": "min_priority",
      "identifier": 128,
      "description": "Messages with level lower than this won't be emitted. The default setting may vary.\nLoggers should revert this to their default setting if the register has not been\nupdated in 3000ms, and also keep the lowest setting they have seen in the last 1500ms.\nThus, clients should write this register every 1000ms and ignore messages which are\ntoo verbose for them.",
      "fields": [
        {
          "name": "_",
          "unit": "",
          "isFloat": false,
          "type": "Priority",
          "storage": 1,
          "defaultValue": 1
        }
      ]
    },
    {
      "kind": "report",
      "name": "debug",
      "identifier": 128,
      "description": "Report a message.",
      "fields": [
        {
          "name": "message",
          "unit": "",
          "isFloat": false,
          "type": "string",
          "storage": 0
        }
      ]
    },
    {
      "kind": "report",
      "name": "log",
      "identifier": 129,
      "description": "Report a message.",
      "fields": [
        {
          "name": "message",
          "unit": "",
          "isFloat": false,
          "type": "string",
          "storage": 0
        }
      ]
    },
    {
      "kind": "report",
      "name": "warn",
      "identifier": 130,
      "description": "Report a message.",
      "fields": [
        {
          "name": "message",
          "unit": "",
          "isFloat": false,
          "type": "string",
          "storage": 0
        }
      ]
    },
    {
      "kind": "report",
      "name": "error",
      "identifier": 131,
      "description": "Report a message.",
      "fields": [
        {
          "name": "message",
          "unit": "",
          "isFloat": false,
          "type": "string",
          "storage": 0
        }
      ]
    }
  ],
  "source": "# Logger\n\n    identifier: 0x12dc1fca\n\nA service which can report messages to the bus.\n\n## Registers\n\n    enum Priority : u8 {\n        Debug = 0,\n        Log = 1,\n        Warning = 2,\n        Error = 3\n    }\n    rw min_priority = 1: Priority @ 0x80\n\nMessages with level lower than this won't be emitted. The default setting may vary.\nLoggers should revert this to their default setting if the register has not been\nupdated in 3000ms, and also keep the lowest setting they have seen in the last 1500ms.\nThus, clients should write this register every 1000ms and ignore messages which are\ntoo verbose for them.\n\n## Commands\n\n    report debug @ 0x80 {\n        message: string\n    }\n    report log @ 0x81 {\n        message: string\n    }\n    report warn @ 0x82 {\n        message: string\n    }\n    report error @ 0x83 {\n        message: string\n    }\n\nReport a message.\n"
}