{
  "name": "Control",
  "status": "experimental",
  "shortId": "control",
  "camelName": "ctrl",
  "shortName": "ctrl",
  "extends": [
    "_base"
  ],
  "notes": {
    "short": "Control service is always service index `0`.\nIt handles actions common to all services on a device."
  },
  "classIdentifier": 0,
  "enums": {
    "AnnounceFlags": {
      "name": "AnnounceFlags",
      "storage": 1,
      "isFlags": true,
      "members": {
        "SupportsACK": 1
      }
    }
  },
  "packets": [
    {
      "kind": "ro",
      "name": "status_code",
      "identifier": 7,
      "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
      "fields": [
        {
          "name": "code",
          "unit": "",
          "isFloat": false,
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "vendor_code",
          "unit": "",
          "isFloat": false,
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "optional": true,
      "identifierName": "status_code",
      "packFormat": "HH",
      "derived": "_base"
    },
    {
      "kind": "command",
      "name": "services",
      "identifier": 0,
      "description": "The `restart_counter` starts at `0x1` and increments by one until it reaches `0xf`, then it stays at `0xf`.\nIf this number ever goes down, it indicates that the device restarted.\nThe upper 4 bits of `restart_counter` are reserved.\n`service_class` indicates class identifier for each service index (service index `0` is always control, so it's\nskipped in this enumeration).\nThe command form can be used to induce report, which is otherwise broadcast every 500ms.",
      "fields": [],
      "identifierName": "announce",
      "hasReport": true
    },
    {
      "kind": "report",
      "name": "services",
      "identifier": 0,
      "description": "The `restart_counter` starts at `0x1` and increments by one until it reaches `0xf`, then it stays at `0xf`.\nIf this number ever goes down, it indicates that the device restarted.\nThe upper 4 bits of `restart_counter` are reserved.\n`service_class` indicates class identifier for each service index (service index `0` is always control, so it's\nskipped in this enumeration).\nThe command form can be used to induce report, which is otherwise broadcast every 500ms.",
      "fields": [
        {
          "name": "restart_counter",
          "unit": "",
          "isFloat": false,
          "type": "u8",
          "storage": 1,
          "isSimpleType": true
        },
        {
          "name": "flags",
          "unit": "",
          "isFloat": false,
          "type": "AnnounceFlags",
          "storage": 1
        },
        {
          "name": "reserved",
          "unit": "",
          "isFloat": false,
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "service_class",
          "unit": "",
          "isFloat": false,
          "type": "u32",
          "storage": 4,
          "isSimpleType": true,
          "startRepeats": true
        }
      ],
      "secondary": true,
      "packFormat": "BBHL"
    },
    {
      "kind": "command",
      "name": "noop",
      "identifier": 128,
      "description": "Do nothing. Always ignored. Can be used to test ACKs.",
      "fields": []
    },
    {
      "kind": "command",
      "name": "identify",
      "identifier": 129,
      "description": "Blink an LED or otherwise draw user's attention.",
      "fields": []
    },
    {
      "kind": "command",
      "name": "reset",
      "identifier": 130,
      "description": "Reset device. ACK may or may not be sent.",
      "fields": []
    },
    {
      "kind": "const",
      "name": "device_description",
      "identifier": 384,
      "description": "Identifies the type of hardware (eg., ACME Corp. Servo X-42 Rev C)",
      "fields": [
        {
          "name": "_",
          "unit": "",
          "isFloat": false,
          "type": "string",
          "storage": 0
        }
      ],
      "optional": true,
      "packFormat": "s"
    },
    {
      "kind": "const",
      "name": "firmware_identifier",
      "identifier": 385,
      "description": "A numeric code for the string above; used to identify firmware images and devices.",
      "fields": [
        {
          "name": "_",
          "unit": "",
          "isFloat": false,
          "type": "u32",
          "storage": 4,
          "isSimpleType": true,
          "absoluteMin": 805306368,
          "absoluteMax": 1073741823
        }
      ],
      "optional": true,
      "packFormat": "L"
    },
    {
      "kind": "const",
      "name": "bootloader_firmware_identifier",
      "identifier": 388,
      "description": "Typically the same as `firmware_identifier` unless device was flashed by hand; the bootloader will respond to that code.",
      "fields": [
        {
          "name": "_",
          "unit": "",
          "isFloat": false,
          "type": "u32",
          "storage": 4,
          "isSimpleType": true,
          "absoluteMin": 805306368,
          "absoluteMax": 1073741823
        }
      ],
      "optional": true,
      "packFormat": "L"
    },
    {
      "kind": "const",
      "name": "firmware_version",
      "identifier": 389,
      "description": "A string describing firmware version; typically semver.",
      "fields": [
        {
          "name": "_",
          "unit": "",
          "isFloat": false,
          "type": "string",
          "storage": 0
        }
      ],
      "optional": true,
      "packFormat": "s"
    },
    {
      "kind": "ro",
      "name": "mcu_temperature",
      "identifier": 386,
      "description": "MCU temperature in degrees Celsius (approximate).",
      "fields": [
        {
          "name": "_",
          "unit": "C",
          "isFloat": false,
          "type": "i16",
          "storage": -2,
          "isSimpleType": true,
          "typicalMin": -10,
          "typicalMax": 150
        }
      ],
      "optional": true,
      "packFormat": "h"
    },
    {
      "kind": "ro",
      "name": "uptime",
      "identifier": 390,
      "description": "Number of microseconds since boot.",
      "fields": [
        {
          "name": "_",
          "unit": "us",
          "isFloat": false,
          "type": "u64",
          "storage": 8,
          "isSimpleType": true
        }
      ],
      "optional": true,
      "packFormat": "b8x"
    },
    {
      "kind": "const",
      "name": "device_url",
      "identifier": 391,
      "description": "Request the information web site for this device",
      "fields": [
        {
          "name": "_",
          "unit": "",
          "isFloat": false,
          "type": "string",
          "storage": 0
        }
      ],
      "optional": true,
      "packFormat": "s"
    },
    {
      "kind": "const",
      "name": "firmware_url",
      "identifier": 392,
      "description": "URL with machine-readable metadata information about updating device firmware",
      "fields": [
        {
          "name": "_",
          "unit": "",
          "isFloat": false,
          "type": "string",
          "storage": 0
        }
      ],
      "optional": true,
      "packFormat": "s"
    }
  ],
  "source": "# Control\n\n    identifier: 0x00000000\n    camel: ctrl\n\nControl service is always service index `0`.\nIt handles actions common to all services on a device.\n\n## Commands\n\n    flags AnnounceFlags : u8 {\n        SupportsACK = 0x01,\n    }\n    command services @ announce { }\n    report {\n        restart_counter: u8\n        flags: AnnounceFlags\n        reserved: u16\n    repeats:\n        service_class: u32\n    }\n\nThe `restart_counter` starts at `0x1` and increments by one until it reaches `0xf`, then it stays at `0xf`.\nIf this number ever goes down, it indicates that the device restarted.\nThe upper 4 bits of `restart_counter` are reserved.\n`service_class` indicates class identifier for each service index (service index `0` is always control, so it's\nskipped in this enumeration).\nThe command form can be used to induce report, which is otherwise broadcast every 500ms.\n\n    command noop @ 0x80 { }\n\nDo nothing. Always ignored. Can be used to test ACKs.\n\n    command identify @ 0x81 { }\n\nBlink an LED or otherwise draw user's attention.\n\n    command reset @ 0x82 { }\n\nReset device. ACK may or may not be sent.\n\n## Registers\n\n    const device_description?: string @ 0x180\n\nIdentifies the type of hardware (eg., ACME Corp. Servo X-42 Rev C)\n\n    const firmware_identifier? : u32 { absolute_min = 0x3000_0000, absolute_max = 0x3fff_ffff } @ 0x181\n\nA numeric code for the string above; used to identify firmware images and devices.\n\n    const bootloader_firmware_identifier?: u32 { absolute_min = 0x3000_0000, absolute_max = 0x3fff_ffff } @ 0x184\n\nTypically the same as `firmware_identifier` unless device was flashed by hand; the bootloader will respond to that code.\n\n    const firmware_version?: string @ 0x185\n\nA string describing firmware version; typically semver.\n\n    ro mcu_temperature?: i16 C { typical_min = -10, typical_max = 150 } @ 0x182\n\nMCU temperature in degrees Celsius (approximate).\n\n    ro uptime?: u64 us @ 0x186\n\nNumber of microseconds since boot.\n\n    const device_url?: string @ 0x187\n\nRequest the information web site for this device\n\n    const firmware_url?: string @ 0x188\n\nURL with machine-readable metadata information about updating device firmware\n"
}