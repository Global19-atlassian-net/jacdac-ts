{
  "name": "Settings Storage",
  "status": "experimental",
  "shortId": "settings",
  "camelName": "settings",
  "shortName": "settings",
  "extends": [
    "_base"
  ],
  "notes": {
    "short": "Non-volatile key-value storage interface for storing settings.",
    "long": "## Secrets\n\nEntries with keys starting with `$` are considered secret.\nThey can be written normally, but they read as a single `0` byte,\nunless they are empty, in which case the value returned is also empty.\nThese are typically used by other services on the same device."
  },
  "classIdentifier": 285727818,
  "enums": {},
  "packets": [
    {
      "kind": "ro",
      "name": "status_code",
      "identifier": 7,
      "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
      "fields": [
        {
          "name": "code",
          "unit": "",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "vendor_code",
          "unit": "",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "optional": true,
      "identifierName": "status_code",
      "packFormat": "u16 u16",
      "derived": "_base"
    },
    {
      "kind": "command",
      "name": "get",
      "identifier": 128,
      "description": "Get the value of given setting. If no such entry exists, the value returned is empty.",
      "fields": [
        {
          "name": "key",
          "unit": "",
          "type": "string",
          "storage": 0
        }
      ],
      "hasReport": true,
      "packFormat": "s"
    },
    {
      "kind": "report",
      "name": "get",
      "identifier": 128,
      "description": "Get the value of given setting. If no such entry exists, the value returned is empty.",
      "fields": [
        {
          "name": "key",
          "unit": "",
          "type": "string0",
          "storage": 0
        },
        {
          "name": "value",
          "unit": "",
          "type": "bytes",
          "storage": 0,
          "isSimpleType": true
        }
      ],
      "secondary": true,
      "packFormat": "z b"
    },
    {
      "kind": "command",
      "name": "set",
      "identifier": 129,
      "description": "Set the value of a given setting.",
      "fields": [
        {
          "name": "key",
          "unit": "",
          "type": "string0",
          "storage": 0
        },
        {
          "name": "value",
          "unit": "",
          "type": "bytes",
          "storage": 0,
          "isSimpleType": true
        }
      ],
      "packFormat": "z b"
    },
    {
      "kind": "command",
      "name": "delete",
      "identifier": 132,
      "description": "Delete a given setting.",
      "fields": [
        {
          "name": "key",
          "unit": "",
          "type": "string",
          "storage": 0
        }
      ],
      "packFormat": "s"
    },
    {
      "kind": "command",
      "name": "list_keys",
      "identifier": 130,
      "description": "Return keys of all settings.",
      "fields": [
        {
          "name": "results",
          "unit": "",
          "type": "pipe",
          "storage": 12
        }
      ],
      "pipeType": "list_keys",
      "packFormat": "b[12]"
    },
    {
      "kind": "pipe_report",
      "name": "listed_key",
      "identifier": 0,
      "description": "Return keys of all settings.",
      "fields": [
        {
          "name": "key",
          "unit": "",
          "type": "string",
          "storage": 0
        }
      ],
      "pipeType": "list_keys",
      "packFormat": "s"
    },
    {
      "kind": "command",
      "name": "list",
      "identifier": 131,
      "description": "Return keys and values of all settings.",
      "fields": [
        {
          "name": "results",
          "unit": "",
          "type": "pipe",
          "storage": 12
        }
      ],
      "pipeType": "list",
      "packFormat": "b[12]"
    },
    {
      "kind": "pipe_report",
      "name": "listed_entry",
      "identifier": 0,
      "description": "Return keys and values of all settings.",
      "fields": [
        {
          "name": "key",
          "unit": "",
          "type": "string0",
          "storage": 0
        },
        {
          "name": "value",
          "unit": "",
          "type": "bytes",
          "storage": 0,
          "isSimpleType": true
        }
      ],
      "pipeType": "list",
      "packFormat": "z b"
    },
    {
      "kind": "command",
      "name": "clear",
      "identifier": 133,
      "description": "Clears all keys.",
      "fields": []
    }
  ],
  "source": "# Settings Storage\n\n    identifier: 0x1107dc4a\n    camel: settings\n\nNon-volatile key-value storage interface for storing settings.\n\n## Secrets\n\nEntries with keys starting with `$` are considered secret.\nThey can be written normally, but they read as a single `0` byte,\nunless they are empty, in which case the value returned is also empty.\nThese are typically used by other services on the same device.\n\n## Commands\n\n    command get @ 0x80 {\n        key: string\n    }\n    report {\n        key: string0\n        value: bytes\n    }\n\nGet the value of given setting. If no such entry exists, the value returned is empty.\n\n    command set @ 0x81 {\n        key: string0\n        value: bytes\n    }\n\nSet the value of a given setting.\n\n    command delete @ 0x84 {\n        key: string\n    }\n\nDelete a given setting.\n\n    command list_keys @ 0x82 {\n        results: pipe\n    }\n    pipe report listed_key {\n        key: string\n    }\n\nReturn keys of all settings.\n\n    command list @ 0x83 {\n        results: pipe\n    }\n    pipe report listed_entry {\n        key: string0\n        value: bytes\n    }\n\nReturn keys and values of all settings.\n\n    command clear @ 0x85 { }\n\nClears all keys."
}