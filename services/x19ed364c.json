{
  "name": "Azure IoT Hub",
  "status": "experimental",
  "shortId": "iothub",
  "camelName": "iotHub",
  "shortName": "iotHub",
  "extends": [
    "_base"
  ],
  "notes": {
    "short": "Send messages, receive commands, and work with device twins in Azure IoT Hub."
  },
  "classIdentifier": 434976332,
  "enums": {},
  "packets": [
    {
      "kind": "ro",
      "name": "status_code",
      "identifier": 259,
      "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
      "fields": [
        {
          "name": "code",
          "unit": "",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "vendor_code",
          "unit": "",
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "optional": true,
      "identifierName": "status_code",
      "packFormat": "u16 u16",
      "derived": "_base"
    },
    {
      "kind": "command",
      "name": "connect",
      "identifier": 128,
      "description": "Try connecting using currently set `connection_string`.\nThe service normally preiodically tries to connect automatically.",
      "fields": []
    },
    {
      "kind": "command",
      "name": "disconnect",
      "identifier": 129,
      "description": "Disconnect from current Hub if any.\nThis disables auto-connect behavior, until a `connect` command is issued.",
      "fields": []
    },
    {
      "kind": "command",
      "name": "send_string_msg",
      "identifier": 130,
      "description": "Sends a short message in string format (it's typically JSON-encoded). Multiple properties can be attached.",
      "fields": [
        {
          "name": "msg",
          "unit": "",
          "type": "string0",
          "storage": 0
        },
        {
          "name": "property_name",
          "unit": "",
          "type": "string0",
          "storage": 0,
          "startRepeats": true
        },
        {
          "name": "property_value",
          "unit": "",
          "type": "string0",
          "storage": 0
        }
      ],
      "hasReport": true,
      "packFormat": "z r: z z"
    },
    {
      "kind": "report",
      "name": "send_string_msg",
      "identifier": 130,
      "description": "Sends a short message in string format (it's typically JSON-encoded). Multiple properties can be attached.",
      "fields": [],
      "secondary": true
    },
    {
      "kind": "command",
      "name": "send_msg_ext",
      "identifier": 131,
      "description": "Sends an arbitrary, possibly binary, message. The size is only limited by RAM on the module.",
      "fields": [],
      "hasReport": true
    },
    {
      "kind": "report",
      "name": "send_msg_ext",
      "identifier": 131,
      "description": "Sends an arbitrary, possibly binary, message. The size is only limited by RAM on the module.",
      "fields": [
        {
          "name": "message",
          "unit": "",
          "type": "pipe_port",
          "storage": 2
        }
      ],
      "secondary": true,
      "pipeType": "send_msg_ext",
      "packFormat": "u16"
    },
    {
      "kind": "pipe_command",
      "name": "message",
      "identifier": 0,
      "description": "Part of the body of the message.",
      "fields": [
        {
          "name": "body",
          "unit": "",
          "type": "bytes",
          "storage": 0,
          "isSimpleType": true,
          "segmented": true
        }
      ],
      "pipeType": "send_msg_ext",
      "packFormat": "b"
    },
    {
      "kind": "meta_pipe_command",
      "name": "properties",
      "identifier": 1,
      "description": "Set properties on the message. Can be repeated multiple times.",
      "fields": [
        {
          "name": "property_name",
          "unit": "",
          "type": "string0",
          "storage": 0,
          "startRepeats": true
        },
        {
          "name": "property_value",
          "unit": "",
          "type": "string0",
          "storage": 0
        }
      ],
      "pipeType": "send_msg_ext",
      "packFormat": "r: z z"
    },
    {
      "kind": "command",
      "name": "subscribe",
      "identifier": 132,
      "description": "Subscribes for cloud to device messages, which will be sent over the specified pipe.",
      "fields": [
        {
          "name": "devicebound",
          "unit": "",
          "type": "pipe",
          "storage": 12
        }
      ],
      "pipeType": "subscribe",
      "packFormat": "b[12]"
    },
    {
      "kind": "meta_pipe_report",
      "name": "devicebound_properties",
      "identifier": 1,
      "description": "If there are any properties, this meta-report is send one or more times.\nAll properties of a given message are always sent before the body.",
      "fields": [
        {
          "name": "property_name",
          "unit": "",
          "type": "string0",
          "storage": 0,
          "startRepeats": true
        },
        {
          "name": "property_value",
          "unit": "",
          "type": "string0",
          "storage": 0
        }
      ],
      "pipeType": "subscribe",
      "packFormat": "r: z z"
    },
    {
      "kind": "pipe_report",
      "name": "devicebound",
      "identifier": 0,
      "description": "For every message, the body is sent in one or more reports like this.",
      "fields": [
        {
          "name": "body",
          "unit": "",
          "type": "bytes",
          "storage": 0,
          "isSimpleType": true,
          "multiSegmented": true,
          "segmented": true
        }
      ],
      "pipeType": "subscribe",
      "packFormat": "b"
    },
    {
      "kind": "command",
      "name": "get_twin",
      "identifier": 133,
      "description": "Ask for current device digital twin.",
      "fields": [
        {
          "name": "twin_result",
          "unit": "",
          "type": "pipe",
          "storage": 12
        }
      ],
      "pipeType": "get_twin",
      "packFormat": "b[12]"
    },
    {
      "kind": "pipe_report",
      "name": "twin_json",
      "identifier": 0,
      "description": "The JSON-encoded twin. This is typically something like:\n`{ \"desired\": { \"foo\": 1, \"$version\": 12 }, \"reported\": { \"foo\": 1, \"bar\" 2, \"$version\": 123 } }`",
      "fields": [
        {
          "name": "json",
          "unit": "",
          "type": "bytes",
          "storage": 0,
          "isSimpleType": true,
          "segmented": true
        }
      ],
      "pipeType": "get_twin",
      "packFormat": "b"
    },
    {
      "kind": "meta_pipe_report",
      "name": "twin_error",
      "identifier": 1,
      "description": "This emitted if status is not 200.",
      "fields": [
        {
          "name": "status_code",
          "unit": "",
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        }
      ],
      "pipeType": "get_twin",
      "packFormat": "u32"
    },
    {
      "kind": "command",
      "name": "subscribe_twin",
      "identifier": 135,
      "description": "Subscribe to updates to our twin.",
      "fields": [
        {
          "name": "twin_updates",
          "unit": "",
          "type": "pipe",
          "storage": 12
        }
      ],
      "pipeType": "subscribe_twin",
      "packFormat": "b[12]"
    },
    {
      "kind": "pipe_report",
      "name": "twin_update_json",
      "identifier": 0,
      "description": "First, the current value of the twin is sent (this includes desired and reported properties).\nNext updates done by the back-end are streamed as they arrive (they only include the desired properties).",
      "fields": [
        {
          "name": "json",
          "unit": "",
          "type": "bytes",
          "storage": 0,
          "isSimpleType": true,
          "multiSegmented": true,
          "segmented": true
        }
      ],
      "pipeType": "subscribe_twin",
      "packFormat": "b"
    },
    {
      "kind": "command",
      "name": "patch_twin",
      "identifier": 134,
      "description": "Start twin update.",
      "fields": [],
      "hasReport": true
    },
    {
      "kind": "report",
      "name": "patch_twin",
      "identifier": 134,
      "description": "Start twin update.",
      "fields": [
        {
          "name": "patch_port",
          "unit": "",
          "type": "pipe_port",
          "storage": 2
        }
      ],
      "secondary": true,
      "pipeType": "patch_twin",
      "packFormat": "u16"
    },
    {
      "kind": "pipe_command",
      "name": "twin_patch_json",
      "identifier": 0,
      "description": "The JSON-encoded twin update. The pipe should be closed when the last packet is sent.\nYou just send updates for `reported` field, like this:\n`{ \"bar\": 3, \"baz\": null }` (skip `\"$version\"` and no `\"reported\": { ... }`).",
      "fields": [
        {
          "name": "json",
          "unit": "",
          "type": "bytes",
          "storage": 0,
          "isSimpleType": true,
          "segmented": true
        }
      ],
      "pipeType": "patch_twin",
      "packFormat": "b"
    },
    {
      "kind": "command",
      "name": "subscribe_method",
      "identifier": 136,
      "description": "Subscribe to direct method calls.",
      "fields": [
        {
          "name": "method_call",
          "unit": "",
          "type": "pipe",
          "storage": 12
        }
      ],
      "pipeType": "subscribe_method",
      "packFormat": "b[12]"
    },
    {
      "kind": "pipe_report",
      "name": "method_call_body",
      "identifier": 0,
      "description": "The method call body is sent using these packets.\nIf the body is empty, a single empty `method_call_body` is sent.",
      "fields": [
        {
          "name": "json",
          "unit": "",
          "type": "bytes",
          "storage": 0,
          "isSimpleType": true,
          "multiSegmented": true,
          "segmented": true
        }
      ],
      "pipeType": "subscribe_method",
      "packFormat": "b"
    },
    {
      "kind": "meta_pipe_report",
      "name": "method_call",
      "identifier": 1,
      "description": "This is sent after the last part of the `method_call_body`.",
      "fields": [
        {
          "name": "method_name",
          "unit": "",
          "type": "string0",
          "storage": 0
        },
        {
          "name": "request_id",
          "unit": "",
          "type": "string0",
          "storage": 0
        }
      ],
      "pipeType": "subscribe_method",
      "packFormat": "z z"
    },
    {
      "kind": "command",
      "name": "respond_to_method",
      "identifier": 137,
      "description": "Respond to a direct method call (`request_id` comes from `subscribe_method` pipe).",
      "fields": [
        {
          "name": "status",
          "unit": "",
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        },
        {
          "name": "request_id",
          "unit": "",
          "type": "string0",
          "storage": 0
        }
      ],
      "hasReport": true,
      "packFormat": "u32 z"
    },
    {
      "kind": "report",
      "name": "respond_to_method",
      "identifier": 137,
      "description": "Respond to a direct method call (`request_id` comes from `subscribe_method` pipe).",
      "fields": [
        {
          "name": "response_body",
          "unit": "",
          "type": "pipe_port",
          "storage": 2
        }
      ],
      "secondary": true,
      "pipeType": "respond_to_method",
      "packFormat": "u16"
    },
    {
      "kind": "pipe_command",
      "name": "method_response",
      "identifier": 0,
      "description": "The pipe should be closed when the last packet of response body is sent.",
      "fields": [
        {
          "name": "json",
          "unit": "",
          "type": "bytes",
          "storage": 0,
          "isSimpleType": true,
          "segmented": true
        }
      ],
      "pipeType": "respond_to_method",
      "packFormat": "b"
    },
    {
      "kind": "ro",
      "name": "connection_status",
      "identifier": 384,
      "description": "Returns `\"ok\"` when connected, and an error description otherwise.",
      "fields": [
        {
          "name": "_",
          "unit": "",
          "type": "string",
          "storage": 0
        }
      ],
      "packFormat": "s"
    },
    {
      "kind": "rw",
      "name": "connection_string",
      "identifier": 128,
      "description": "Connection string typically looks something like \n`HostName=my-iot-hub.azure-devices.net;DeviceId=my-dev-007;SharedAccessKey=xyz+base64key`.\nYou can get it in `Shared access policies -> iothubowner -> Connection string-primary key` in the Azure Portal.\nThis register is write-only.\nYou can use `hub_name` and `device_id` to check if connection string is set, but you cannot get the shared access key.",
      "fields": [
        {
          "name": "_",
          "unit": "",
          "type": "string",
          "storage": 0
        }
      ],
      "packFormat": "s"
    },
    {
      "kind": "ro",
      "name": "hub_name",
      "identifier": 385,
      "description": "Something like `my-iot-hub.azure-devices.net`; empty string when `connection_string` is not set.",
      "fields": [
        {
          "name": "_",
          "unit": "",
          "type": "string",
          "storage": 0
        }
      ],
      "packFormat": "s"
    },
    {
      "kind": "ro",
      "name": "device_id",
      "identifier": 386,
      "description": "Something like `my-dev-007`; empty string when `connection_string` is not set.",
      "fields": [
        {
          "name": "_",
          "unit": "",
          "type": "string",
          "storage": 0
        }
      ],
      "packFormat": "s"
    },
    {
      "kind": "event",
      "name": "connected",
      "identifier": 1,
      "description": "Emitted upon successful connection.",
      "fields": []
    },
    {
      "kind": "event",
      "name": "connection_error",
      "identifier": 2,
      "description": "Emitted when connection was lost.",
      "fields": [
        {
          "name": "reason",
          "unit": "",
          "type": "string",
          "storage": 0
        }
      ],
      "packFormat": "s"
    },
    {
      "kind": "event",
      "name": "devicebound_str",
      "identifier": 3,
      "description": "This event is emitted upon reception of a cloud to device message, that is a string\n(doesn't contain NUL bytes) and fits in a single event packet.\nFor reliable reception, use the `subscribe` command above.",
      "fields": [
        {
          "name": "msg",
          "unit": "",
          "type": "string0",
          "storage": 0
        },
        {
          "name": "property_name",
          "unit": "",
          "type": "string0",
          "storage": 0,
          "startRepeats": true
        },
        {
          "name": "property_value",
          "unit": "",
          "type": "string0",
          "storage": 0
        }
      ],
      "packFormat": "z r: z z"
    }
  ],
  "source": "# Azure IoT Hub\n\n    identifier: 0x19ed364c\n    camel: iotHub\n\nSend messages, receive commands, and work with device twins in Azure IoT Hub.\n\n## Commands\n\n    command connect @ 0x80 {}\n\nTry connecting using currently set `connection_string`.\nThe service normally preiodically tries to connect automatically.\n\n    command disconnect @ 0x81 {}\n\nDisconnect from current Hub if any.\nThis disables auto-connect behavior, until a `connect` command is issued.\n\n    command send_string_msg @ 0x82 {\n        msg: string0\n    repeats:\n        property_name: string0\n        property_value: string0\n    }\n    report {}\n\nSends a short message in string format (it's typically JSON-encoded). Multiple properties can be attached.\n\n    command send_msg_ext @ 0x83 {}\n    report {\n        message: pipe_port\n    }\n\nSends an arbitrary, possibly binary, message. The size is only limited by RAM on the module.\n\n    pipe command message {\n    segmented:\n        body: bytes\n    }\n\nPart of the body of the message.\n\n    meta pipe command properties @ 0x01 {\n    repeats:\n        property_name: string0\n        property_value: string0\n    }\n\nSet properties on the message. Can be repeated multiple times.\n\n    command subscribe @ 0x84 {\n        devicebound: pipe\n    }\n\nSubscribes for cloud to device messages, which will be sent over the specified pipe.\n\n    meta pipe report devicebound_properties @ 0x01 {\n    repeats:\n        property_name: string0\n        property_value: string0\n    }\n\nIf there are any properties, this meta-report is send one or more times.\nAll properties of a given message are always sent before the body.\n\n    pipe report devicebound {\n    multi-segmented:\n        body: bytes\n    }\n\nFor every message, the body is sent in one or more reports like this.\n\n    command get_twin @ 0x85 {\n        twin_result: pipe\n    }\n\nAsk for current device digital twin.\n\n    pipe report twin_json {\n    segmented:\n        json: bytes\n    }\n\nThe JSON-encoded twin. This is typically something like:\n`{ \"desired\": { \"foo\": 1, \"$version\": 12 }, \"reported\": { \"foo\": 1, \"bar\" 2, \"$version\": 123 } }`\n\n    meta pipe report twin_error @ 0x01 {\n        status_code: u32\n    }\n\nThis emitted if status is not 200.\n\n    command subscribe_twin @ 0x87 {\n        twin_updates: pipe\n    }\n\nSubscribe to updates to our twin.\n\n    pipe report twin_update_json {\n    multi-segmented:\n        json: bytes\n    }\n\nFirst, the current value of the twin is sent (this includes desired and reported properties).\nNext updates done by the back-end are streamed as they arrive (they only include the desired properties).\n\n    command patch_twin @ 0x86 {}\n    report {\n        patch_port: pipe_port\n    }\n\nStart twin update.\n\n    pipe command twin_patch_json {\n    segmented:\n        json: bytes\n    }\n\nThe JSON-encoded twin update. The pipe should be closed when the last packet is sent.\nYou just send updates for `reported` field, like this:\n`{ \"bar\": 3, \"baz\": null }` (skip `\"$version\"` and no `\"reported\": { ... }`).\n\n    command subscribe_method @ 0x88 {\n        method_call: pipe\n    }\n\nSubscribe to direct method calls.\n\n    pipe report method_call_body {\n    multi-segmented:\n        json: bytes\n    }\n\nThe method call body is sent using these packets.\nIf the body is empty, a single empty `method_call_body` is sent.\n\n    meta pipe report method_call @ 0x01 {\n        method_name: string0\n        request_id: string0\n    }\n\nThis is sent after the last part of the `method_call_body`.\n\n    command respond_to_method @ 0x89 {\n        status: u32\n        request_id: string0\n    }\n    report {\n        response_body: pipe_port\n    }\n\nRespond to a direct method call (`request_id` comes from `subscribe_method` pipe).\n\n    pipe command method_response {\n    segmented:\n        json: bytes\n    }\n\nThe pipe should be closed when the last packet of response body is sent.\n\n## Registers\n\n    ro connection_status: string @ 0x180\n\nReturns `\"ok\"` when connected, and an error description otherwise.\n\n    rw connection_string: string @ 0x80\n\nConnection string typically looks something like \n`HostName=my-iot-hub.azure-devices.net;DeviceId=my-dev-007;SharedAccessKey=xyz+base64key`.\nYou can get it in `Shared access policies -> iothubowner -> Connection string-primary key` in the Azure Portal.\nThis register is write-only.\nYou can use `hub_name` and `device_id` to check if connection string is set, but you cannot get the shared access key.\n\n    ro hub_name: string @ 0x181\n\nSomething like `my-iot-hub.azure-devices.net`; empty string when `connection_string` is not set.\n\n    ro device_id: string @ 0x182\n\nSomething like `my-dev-007`; empty string when `connection_string` is not set.\n\n\n## Events\n\n    event connected @ 0x01\n\nEmitted upon successful connection.\n\n    event connection_error @ 0x02 {\n        reason: string\n    }\n\nEmitted when connection was lost.\n\n    event devicebound_str @ 0x03 {\n        msg: string0\n    repeats:\n        property_name: string0\n        property_value: string0 \n    }\n\nThis event is emitted upon reception of a cloud to device message, that is a string\n(doesn't contain NUL bytes) and fits in a single event packet.\nFor reliable reception, use the `subscribe` command above.\n"
}