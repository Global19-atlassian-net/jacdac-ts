{
  "name": "Bootloader",
  "status": "experimental",
  "shortId": "bootloader",
  "camelName": "Bootloader",
  "shortName": "Bootloader",
  "extends": [
    "_base"
  ],
  "notes": {
    "short": "Allows flashing (reprogramming) devices over JACDAC."
  },
  "classIdentifier": 536516936,
  "enums": {
    "Error": {
      "name": "Error",
      "storage": 4,
      "members": {
        "NoError": 0,
        "PacketTooSmall": 1,
        "OutOfFlashableRange": 2,
        "InvalidPageOffset": 3,
        "NotPageAligned": 4
      }
    }
  },
  "packets": [
    {
      "kind": "ro",
      "name": "status_code",
      "identifier": 7,
      "description": "Reports the current state or error status of the device. ``code`` is a standardized value from \nthe JACDAC error codes. ``vendor_code`` is any vendor specific error code describing the device\nstate. This report is typically not queried, when a device has an error, it will typically\nadd this report in frame along with the anounce packet.",
      "fields": [
        {
          "name": "code",
          "unit": "",
          "isFloat": false,
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "vendor_code",
          "unit": "",
          "isFloat": false,
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        }
      ],
      "optional": true,
      "identifierName": "status_code",
      "packFormat": "u16 u16",
      "derived": "_base"
    },
    {
      "kind": "command",
      "name": "info",
      "identifier": 0,
      "description": "The `service_class` is always `0x1ffa9948`. The `firmware_identifier` identifies the kind of firmware\nthat \"fits\" this device.",
      "fields": [],
      "identifierName": "announce",
      "hasReport": true
    },
    {
      "kind": "report",
      "name": "info",
      "identifier": 0,
      "description": "The `service_class` is always `0x1ffa9948`. The `firmware_identifier` identifies the kind of firmware\nthat \"fits\" this device.",
      "fields": [
        {
          "name": "service_class",
          "unit": "",
          "isFloat": false,
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        },
        {
          "name": "page_size",
          "unit": "B",
          "isFloat": false,
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        },
        {
          "name": "flashable_size",
          "unit": "B",
          "isFloat": false,
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        },
        {
          "name": "firmware_identifier",
          "unit": "",
          "isFloat": false,
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        }
      ],
      "secondary": true,
      "packFormat": "u32 u32 u32 u32"
    },
    {
      "kind": "command",
      "name": "set_session",
      "identifier": 129,
      "description": "The flashing host should generate a random id, and use this command to set it.",
      "fields": [
        {
          "name": "session_id",
          "unit": "",
          "isFloat": false,
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        }
      ],
      "hasReport": true,
      "packFormat": "u32"
    },
    {
      "kind": "report",
      "name": "set_session",
      "identifier": 129,
      "description": "The flashing host should generate a random id, and use this command to set it.",
      "fields": [
        {
          "name": "session_id",
          "unit": "",
          "isFloat": false,
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        }
      ],
      "secondary": true,
      "packFormat": "u32"
    },
    {
      "kind": "command",
      "name": "page_data",
      "identifier": 128,
      "description": "Use to send flashing data. A physical page is split into `chunk_max + 1` chunks, where `chunk_no = 0 ... chunk_max`.\nEach chunk is stored at `page_address + page_offset`. `page_address` has to be equal in all chunks,\nand is included in response.\nOnly the last chunk causes writing to flash and elicits response.\n\nErrors not listed are also possible. Errors larger than `0xffff` indicate de-synchronization on chunk numbers.",
      "fields": [
        {
          "name": "page_address",
          "unit": "",
          "isFloat": false,
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        },
        {
          "name": "page_offset",
          "unit": "",
          "isFloat": false,
          "type": "u16",
          "storage": 2,
          "isSimpleType": true
        },
        {
          "name": "chunk_no",
          "unit": "",
          "isFloat": false,
          "type": "u8",
          "storage": 1,
          "isSimpleType": true
        },
        {
          "name": "chunk_max",
          "unit": "",
          "isFloat": false,
          "type": "u8",
          "storage": 1,
          "isSimpleType": true
        },
        {
          "name": "session_id",
          "unit": "",
          "isFloat": false,
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        },
        {
          "name": "reserved0",
          "unit": "",
          "isFloat": false,
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        },
        {
          "name": "reserved1",
          "unit": "",
          "isFloat": false,
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        },
        {
          "name": "reserved2",
          "unit": "",
          "isFloat": false,
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        },
        {
          "name": "reserved3",
          "unit": "",
          "isFloat": false,
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        },
        {
          "name": "page_data",
          "unit": "",
          "isFloat": false,
          "type": "bytes",
          "storage": 0,
          "isSimpleType": true,
          "maxBytes": 208
        }
      ],
      "hasReport": true,
      "packFormat": "u32 u16 u8 u8 u32 u32 u32 u32 u32 b"
    },
    {
      "kind": "report",
      "name": "page_data",
      "identifier": 128,
      "description": "Use to send flashing data. A physical page is split into `chunk_max + 1` chunks, where `chunk_no = 0 ... chunk_max`.\nEach chunk is stored at `page_address + page_offset`. `page_address` has to be equal in all chunks,\nand is included in response.\nOnly the last chunk causes writing to flash and elicits response.\n\nErrors not listed are also possible. Errors larger than `0xffff` indicate de-synchronization on chunk numbers.",
      "fields": [
        {
          "name": "session_id",
          "unit": "",
          "isFloat": false,
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        },
        {
          "name": "page_error",
          "unit": "",
          "isFloat": false,
          "type": "Error",
          "storage": 4
        },
        {
          "name": "page_address",
          "unit": "",
          "isFloat": false,
          "type": "u32",
          "storage": 4,
          "isSimpleType": true
        }
      ],
      "secondary": true,
      "packFormat": "u32 u32 u32"
    }
  ],
  "source": "# Bootloader\n\n    identifier: 0x1ffa9948\n\nAllows flashing (reprogramming) devices over JACDAC.\n\n## Commands\n\n    command info @ announce { }\n    report {\n        service_class: u32\n        page_size: u32 B\n        flashable_size: u32 B\n        firmware_identifier: u32\n    }\n\nThe `service_class` is always `0x1ffa9948`. The `firmware_identifier` identifies the kind of firmware\nthat \"fits\" this device.\n\n    command set_session @ 0x81 {\n        session_id: u32\n    }\n    report {\n        session_id: u32\n    }\n\nThe flashing host should generate a random id, and use this command to set it.\n\n    enum Error : u32 {\n        NoError = 0\n        PacketTooSmall = 1\n        OutOfFlashableRange = 2\n        InvalidPageOffset = 3\n        NotPageAligned = 4\n    }\n    command page_data @ 0x80 {\n        page_address: u32\n        page_offset: u16\n        chunk_no: u8\n        chunk_max: u8\n        session_id: u32\n        reserved0: u32\n        reserved1: u32\n        reserved2: u32\n        reserved3: u32\n        page_data: bytes {maxBytes = 208}\n    }\n    report {\n        session_id: u32\n        page_error: Error\n        page_address: u32\n    }\n\nUse to send flashing data. A physical page is split into `chunk_max + 1` chunks, where `chunk_no = 0 ... chunk_max`.\nEach chunk is stored at `page_address + page_offset`. `page_address` has to be equal in all chunks,\nand is included in response.\nOnly the last chunk causes writing to flash and elicits response.\n\nErrors not listed are also possible. Errors larger than `0xffff` indicate de-synchronization on chunk numbers.\n"
}