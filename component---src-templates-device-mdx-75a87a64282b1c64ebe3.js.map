{"version":3,"sources":["webpack:///../src/azure-iot/dtdl.ts","webpack:///./src/components/DeviceDTDLSnippet.tsx","webpack:///./src/components/DeviceSpecificationSource.tsx","webpack:///./src/components/DeviceSpecification.tsx","webpack:///./src/templates/device.mdx"],"names":["toDTMI","dev","segments","version","id","map","seg","toString","replace","join","undefined","toLowerCase","enumDTDI","srv","en","classIdentifier","name","objectSchema","schemas","arraySchema","schema","toSchema","pkt","supportsArray","fields","field","type","isFloat","isSimpleType","test","shift","enums","console","warn","fieldType","length","startRepeats","repeatIndex","findIndex","nonRepeat","slice","repeats","shortName","packetToDTDL","dtdl","kind","shortId","description","unit","semantic","indexOf","toUnit","writable","log","escapeName","trim","escapeDisplayName","serviceToInterface","notes","packets","filter","derived","c","hasEvents","find","hasEnums","Object","keys","push","concat","members","k","displayName","enumValue","enumSchema","deviceToDTDL","services","serviceSpecificationFromClassIdentifier","uniqueMap","i","serviceIndex","serviceToComponent","JSON","stringify","DeviceDTDLSnippet","props","useMemo","Snippet","value","mode","download","useStyles","makeStyles","theme","createStyles","root","flexGrow","backgroundColor","palette","background","paper","marginBottom","spacing","pre","margin","padding","whiteSpec","DeviceSpecificationSource","deviceSpecification","showMarkdown","showSpecification","showDTDL","classes","useState","tab","setTab","spec","index","className","Paper","square","Tabs","onChange","event","newValue","aria-label","source","n","Tab","key","label","a11yProps","TabPanel","DeviceSpecification","device","showSource","gridBreakpoints","useGridBreakpoints","to","link","image","alt","src","Markdown","repo","FirmwareCard","slug","firmwares","firmware","IDChip","Grid","container","sc","item","ServiceSpecificationCard","specification","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","deviceSpecificationFromIdentifier","pageContext","node","parentName","href","isMDXComponent"],"mappings":"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","file":"component---src-templates-device-mdx-75a87a64282b1c64ebe3.js","sourcesContent":["/***\n * JACDAC service/device specification to DTDL\n * \n *  DTDL specification: https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md.\n */\n\nimport { serviceSpecificationFromClassIdentifier } from \"../jdom/spec\";\nimport { uniqueMap } from \"../jdom/utils\";\n\nexport const REFERENCE_URL = \"https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md\"\nexport const DTDL_NAME = \"Digital Twins Definition Language\"\nconst CONTEXT = \"dtmi:dtdl:context;2\";\n\n// https://github.com/Azure/digital-twin-model-identifier\n// ^dtmi:(?:_+[A-Za-z0-9]|[A-Za-z])(?:[A-Za-z0-9_]*[A-Za-z0-9])?(?::(?:_+[A-Za-z0-9]|[A-Za-z])(?:[A-Za-z0-9_]*[A-Za-z0-9])?)*;[1-9][0-9]{0,8}$\nfunction toDTMI(dev: jdspec.DeviceSpec, segments: (string | number)[], version?: number) {\n    return `dtmi:jacdac:${[dev.id, ...segments]\n        .map(seg => typeof seg === \"string\" ? seg : `x${seg.toString(16)}`)\n        .map(seg => seg.replace(/-/g, '_'))\n        .join(':')};${version !== undefined ? version : 1}`.toLowerCase();\n}\n\nfunction toUnit(pkt: jdspec.PacketInfo) {\n    if (pkt.fields.length !== 1)\n        return undefined;\n    const field = pkt.fields[0];\n    if (!field.unit)\n        return undefined;\n\n    /**\n     *     type Unit = \"m\" | \"kg\" | \"g\" | \"s\" | \"A\" | \"K\" | \"cd\" | \"mol\" | \"Hz\" | \"rad\" | \"sr\" | \"N\" | \"Pa\" | \"J\" | \"W\" | \"C\" | \"V\" | \"F\" | \"Ohm\"\n        | \"S\" | \"Wb\" | \"T\" | \"H\" | \"Cel\" | \"lm\" | \"lx\" | \"Bq\" | \"Gy\" | \"Sv\" | \"kat\" | \"m2\" | \"m3\" | \"l\" | \"m/s\" | \"m/s2\" | \"m3/s\" | \"l/s\"\n        | \"W/m2\" | \"cd/m2\" | \"bit\" | \"bit/s\" | \"lat\" | \"lon\" | \"pH\" | \"dB\" | \"dBW\" | \"Bspl\" | \"count\" | \"/\" | \"%RH\" | \"%EL\" | \"EL\"\n        | \"1/s\" | \"1/min\" | \"beat/min\" | \"beats\" | \"S/m\" | \"B\" | \"VA\" | \"VAs\" | \"var\" | \"vars\" | \"J/m\" | \"kg/m3\" | \"deg\";\n\n    type SecondaryUnit = \"ms\" | \"min\" | \"h\" | \"MHz\" | \"kW\" | \"kVA\" | \"kvar\" | \"Ah\" | \"Wh\" | \"kWh\"\n        | \"varh\" | \"kvarh\" | \"kVAh\" | \"Wh/km\" | \"KiB\" | \"GB\" | \"Mbit/s\" | \"B/s\" | \"MB/s\" | \"mV\" | \"mA\" | \"dBm\" | \"ug/m3\"\n        | \"mm/h\" | \"m/h\" | \"ppm\" | \"/100\" | \"/1000\" | \"hPa\" | \"mm\" | \"cm\" | \"km\" | \"km/h\";\n     */\n    const units: jdspec.SMap<{ semantic: string; unit: string; }> = {\n        \"m/s2\": {\n            semantic: \"Acceleration\",\n            unit: \"metrePerSecondSquared\"\n        },\n        \"rad\": {\n            semantic: \"Angle\",\n            unit: \"radian\"\n        },\n        \"rad/s\": {\n            semantic: \"AngularVelocity\",\n            unit: \"radianPerSecond\"\n        },\n        \"rad/s2\": {\n            semantic: \"AngularAcceleration\",\n            unit: \"radianPerSecondSquared\"\n        },\n        \"m\": {\n            semantic: \"Length\",\n            unit: \"metre\"\n        },\n        \"m2\": {\n            semantic: \"Area\",\n            unit: \"squareMetre\"\n        },\n        \"s\": {\n            semantic: \"TimeSpan\",\n            unit: \"second\"\n        },\n        \"ms\": {\n            semantic: \"TimeSpan\",\n            unit: \"millisecond\"\n        },\n        \"us\": {\n            semantic: \"TimeSpan\",\n            unit: \"microsecond\"\n        },\n        \"K\": {\n            semantic: \"Temperature\",\n            unit: \"kelvin\"\n        },\n        \"C\": {\n            semantic: \"Temperature\",\n            unit: \"degreeCelsius\"\n        },\n        \"F\": {\n            semantic: \"Temperature\",\n            unit: \"degreeFahrenheit\"\n        },\n        \"g\": {\n            semantic: \"Acceleration\",\n            unit: \"gForce\"\n        },\n        \"mA\": {\n            semantic: \"Current\",\n            unit: \"milliampere\"\n        },\n        \"uA\": {\n            semantic: \"Current\",\n            unit: \"microampere\"\n        },\n        \"A\": {\n            semantic: \"Current\",\n            unit: \"ampere\"\n        },\n        \"mV\": {\n            semantic: \"Voltage\",\n            unit: \"millivolt\"\n        },\n        \"uV\": {\n            semantic: \"Voltage\",\n            unit: \"microvolt\"\n        },\n        \"V\": {\n            semantic: \"Voltage\",\n            unit: \"volt\"\n        },\n    };\n    const unit = units[field.unit];\n    if (unit)\n        return unit;\n\n    // ignoring some known units\n    if ([\"#\", \"/\"].indexOf(field.unit) > -1)\n        return undefined;\n\n    console.warn(`unsupported unit ${field.unit}`)\n    return undefined;\n}\n\n// https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md#primitive-schemas\n\nfunction enumDTDI(dev: jdspec.DeviceSpec, srv: jdspec.ServiceSpec, en: jdspec.EnumInfo): string {\n    return toDTMI(dev, [srv.classIdentifier, en.name])\n}\n\nfunction enumSchema(dev: jdspec.DeviceSpec, srv: jdspec.ServiceSpec, en: jdspec.EnumInfo): DTDLSchema {\n    const dtdl = {\n        \"@type\": \"Enum\",\n        \"@id\": enumDTDI(dev, srv, en),\n        \"valueSchema\": \"integer\",\n        \"enumValues\": Object.keys(en.members).map(k => ({\n            name: escapeName(k),\n            displayName: k,\n            enumValue: en.members[k]\n        }))\n    }\n    return dtdl;\n}\n\nfunction fieldType(dev: jdspec.DeviceSpec, srv: jdspec.ServiceSpec, pkt: jdspec.PacketInfo, field: jdspec.PacketMember) {\n    let type: string;\n    if (field.type == \"bool\")\n        type = \"boolean\";\n    else if (field.isFloat)\n        type = \"float\";\n    else if (field.isSimpleType) {\n        if (/^(u|i)/.test(field.type))\n            type = \"integer\";\n        else if (field.type === \"B\")\n            // base64 encoded binary data\n            type = \"string\";\n    }\n    else if (field.type === \"string\" || field.type == \"string0\")\n        type = \"string\";\n    else if (field.shift && /^(u|i)/.test(field.type))\n        type = \"float\"; // decimal type\n    else {\n        const en = srv.enums[field.type];\n        if (en)\n            type = enumDTDI(dev, srv, en);\n    }\n\n    if (!type)\n        console.warn(`unknown field type ${field.type}`, field)\n\n    return {\n        name: field.name == \"_\" ? pkt.name : field.name,\n        type: type\n    }\n}\n\n// warps fields into an object\nfunction objectSchema(schemas: DTDLSchema[]): DTDLSchema {\n    return {\n        \"@type\": \"Object\",\n        \"fields\": schemas\n    }\n}\n\n// wraps a schema into an array\nfunction arraySchema(schema: string | DTDLSchema): DTDLSchema {\n    return {\n        \"@type\": \"Array\",\n        \"elementSchema\": schema\n    }\n}\n\n// converts JADAC pkt data layout into a DTDL schema\nfunction toSchema(dev: jdspec.DeviceSpec, srv: jdspec.ServiceSpec, pkt: jdspec.PacketInfo, supportsArray?: boolean): string | DTDLSchema {\n    const fields = pkt.fields.map(field => fieldType(dev, srv, pkt, field));\n    if (!fields.length)\n        return undefined;\n\n    // a single data entry\n    if (fields.length === 1 && !pkt.fields[0].startRepeats)\n        return fields[0].type;\n\n    // map fields into schema\n    const schemas: DTDLSchema[] =\n        fields.map(field => ({\n            name: field.name,\n            schema: field.type\n        }))\n\n    // is there an array?\n    const repeatIndex = pkt.fields.findIndex(field => field.startRepeats);\n\n    if (repeatIndex < 0) {\n        // no array\n        // wrap schemas into an object\n        return objectSchema(schemas)\n    }\n\n    // check if arrays are supported\n    if (!supportsArray) {\n        console.warn(`arrays not supported in ${srv.shortName}.${pkt.name}`)\n        return undefined;\n    }\n\n    if (repeatIndex == 0) {\n        // the whole structure is an array\n        return arraySchema(objectSchema(schemas))\n    }\n    else {\n        // split fields into prelude and array data\n        const nonRepeat = schemas.slice(0, repeatIndex);\n        const repeats = schemas.slice(repeatIndex);\n        return objectSchema([\n            ...nonRepeat,\n            {\n                name: \"repeat\",\n                schema: arraySchema(repeats.length > 1 ? objectSchema(repeats) : repeats[0])\n            }\n        ]);\n    }\n}\n\nfunction packetToDTDL(dev: jdspec.DeviceSpec, srv: jdspec.ServiceSpec, pkt: jdspec.PacketInfo): DTDLContent {\n    const types: jdspec.SMap<string> = {\n        \"const\": \"Property\",\n        \"rw\": \"Property\",\n        \"ro\": \"Property\",\n        \"event\": \"Telemetry\"\n    }\n    const dtdl: any = {\n        \"@type\": types[pkt.kind] || `Unsupported${pkt.kind}`,\n        name: pkt.name,\n        \"@id\": toDTMI(dev, [srv.shortId, pkt.kind, pkt.name]),\n        description: pkt.description,\n    }\n    switch (pkt.kind) {\n        case \"report\":\n        case \"command\":\n            // https://docs.microsoft.com/en-us/azure/digital-twins/concepts-models#azure-digital-twins-dtdl-implementation-specifics\n            return undefined;\n        case \"const\":\n        case \"rw\":\n        case \"ro\":\n        case \"event\":\n            const unit = toUnit(pkt);\n            if (unit) {\n                dtdl.unit = unit.unit;\n            }\n            dtdl.schema = toSchema(dev, srv, pkt, false)\n            if (pkt.kind === \"rw\")\n                dtdl.writable = true;\n            if (!dtdl.schema && pkt.kind === \"event\") {\n                // keep a count of the events\n                dtdl[\"@type\"] = [dtdl[\"@type\"], \"Event\"]\n                dtdl.schema = toDTMI(dev, [srv.shortId, \"event\"]);\n            }\n            else if (unit && unit.semantic)\n                dtdl[\"@type\"] = [dtdl[\"@type\"], unit.semantic]\n            break;\n        default:\n            console.log(`unknown packet kind ${pkt.kind}`)\n            break;\n    }\n\n    if (!dtdl.schema) {\n        console.log(`unknown schema for ${srv.name}.${pkt.name}`);\n        return undefined;\n    }\n\n    return dtdl;\n}\n\n\ninterface DTDLNode {\n    '@type'?: string;\n    '@id'?: string;\n    // 1-64 characters\n    // ^[a-zA-Z](?:[a-zA-Z0-9_]*[a-zA-Z0-9])?$\n    name?: string;\n    displayName?: string,\n    description?: string;\n}\n\ninterface DTDLSchema extends DTDLNode {\n    fields?: DTDLSchema[];\n    schema?: string | DTDLSchema;\n    elementSchema?: string | DTDLSchema;\n}\n\ninterface DTDLContent extends DTDLNode {\n    '@type': \"Property\" | \"Command\" | \"Component\" | \"Interface\";\n    unit?: string;\n    schema?: string | DTDLSchema;\n}\n\ninterface DTDLInterface extends DTDLContent {\n    contents: DTDLContent[];\n    schemas?: (DTDLSchema | DTDLInterface)[];\n    '@context'?: string;\n}\n\nfunction escapeName(name: string) {\n    name = name.trim().replace(/[^a-zA-Z0-9_]/g, '_');\n    if (!/^[a-zA-Z]/.test(name))\n        name = \"a\" + name;\n    return name.slice(0, 64);\n}\n\nfunction escapeDisplayName(name: string) {\n    return name.slice(0, 64);\n}\n\nfunction serviceToInterface(dev: jdspec.DeviceSpec, srv: jdspec.ServiceSpec): DTDLInterface {\n    const dtdl: DTDLInterface = {\n        \"@type\": \"Interface\",\n        \"@id\": toDTMI(dev, [srv.shortId]),\n        \"displayName\": escapeDisplayName(srv.name),\n        \"description\": srv.notes[\"short\"],\n        \"contents\": srv.packets\n            .filter(pkt => !pkt.derived)\n            .map(pkt => packetToDTDL(dev, srv, pkt)).filter(c => !!c)\n    }\n    const hasEvents = srv.packets.find(pkt => pkt.kind === \"event\");\n    const hasEnums = Object.keys(srv.enums).length;\n    if (hasEvents || hasEnums) {\n        dtdl.schemas = [];\n        if (hasEvents)\n            dtdl.schemas.push({\n                \"@id\": toDTMI(dev, [srv.shortId, \"event\"]),\n                \"@type\": \"Object\",\n                \"fields\": [{\n                    \"name\": \"count\",\n                    \"schema\": \"integer\"\n                }]\n            });\n        if (hasEnums)\n            dtdl.schemas = dtdl.schemas.concat(Object.keys(srv.enums).map(en => enumSchema(dev, srv, srv.enums[en])));\n    }\n    dtdl[\"@context\"] = CONTEXT\n    return dtdl;\n}\n\nfunction serviceToComponent(dev: jdspec.DeviceSpec, srv: jdspec.ServiceSpec, serviceIndex: number): any {\n    const dtdl = {\n        \"@type\": \"Component\",\n        \"name\": escapeName(srv.shortName),\n        \"displayName\": escapeDisplayName(srv.name),\n        \"schema\": toDTMI(dev, [srv.shortId])\n    }\n    return dtdl;\n}\n\nexport function deviceToDTDL(dev: jdspec.DeviceSpec): string {\n    const services = dev.services.map(srv => serviceSpecificationFromClassIdentifier(srv));\n    const uniqueServices = uniqueMap(services, srv => srv.classIdentifier.toString(), srv => srv);\n    const schemas = uniqueServices.map(srv => serviceToInterface(dev, srv));\n\n    const dtdl: DTDLInterface = {\n        \"@type\": \"Interface\",\n        \"@id\": toDTMI(dev, []),\n        \"displayName\": escapeDisplayName(dev.name),\n        \"description\": dev.description,\n        \"contents\": services.map((srv, i) => serviceToComponent(dev, srv, i)),\n        \"@context\": CONTEXT\n    }\n    return JSON.stringify([dtdl, ...schemas], null, 2);\n}\n","import React, { useMemo } from \"react\";\nimport { deviceToDTDL } from \"../../../src/azure-iot/dtdl\";\nimport Snippet from \"./Snippet\";\n\nexport function DeviceDTDLSnippet(props: { dev: jdspec.DeviceSpec }) {\n    const { dev } = props;\n\n    const dtdl = useMemo<string>(\n        () => deviceToDTDL(dev),\n        [dev]);\n\n    return <Snippet value={dtdl} mode=\"json\" download={`${dev.name}.json`} />\n}","import React, { useMemo, useState } from 'react';\n// tslint:disable-next-line: no-submodule-imports\nimport Tabs from '@material-ui/core/Tabs';\n// tslint:disable-next-line: no-submodule-imports\nimport Tab from '@material-ui/core/Tab';\nimport { Paper, createStyles, makeStyles, Theme } from '@material-ui/core';\nimport TabPanel, { a11yProps } from './TabPanel';\nimport Snippet from './Snippet';\nimport DeviceSpecification from './DeviceSpecification';\nimport { DeviceDTDLSnippet } from './DeviceDTDLSnippet';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n        marginBottom: theme.spacing(1)\n    },\n    pre: {\n        margin: \"0\",\n        padding: \"0\",\n        backgroundColor: \"transparent\",\n        whiteSpec: \"pre-wrap\"\n    }\n}));\n\nexport default function DeviceSpecificationSource(props: {\n    deviceSpecification?: jdspec.DeviceSpec,\n    showMarkdown?: boolean,\n    showSpecification?: boolean,\n    showDTDL?: boolean\n}) {\n    const { deviceSpecification, showMarkdown, showSpecification, showDTDL } = props;\n    const classes = useStyles();\n    const [tab, setTab] = useState(0);\n    const spec = deviceSpecification\n\n    const handleTabChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n        setTab(newValue);\n    };\n\n    let index = 0;\n    return (\n        <div className={classes.root}>\n            <Paper square>\n                <Tabs value={tab} onChange={handleTabChange} aria-label=\"View specification formats\">\n                    {[\n                        showMarkdown && deviceSpecification.source && \"Markdown\",\n                        showSpecification && \"Specification\",\n                        \"JSON\",\n                        showDTDL && \"DTDL\",\n                    ].filter(n => !!n)\n                        .map((n, i) => <Tab key={n} label={n} {...a11yProps(i)} />)}\n                </Tabs>\n                {showMarkdown && deviceSpecification.source && <TabPanel value={tab} index={index++}>\n                    <Snippet value={deviceSpecification.source} mode=\"markdown\" />\n                </TabPanel>}\n                {showSpecification && <TabPanel key=\"spec\" value={tab} index={index++}>\n                    <DeviceSpecification device={spec} />\n                </TabPanel>}\n                <TabPanel key={`convjson`} value={tab} index={index++}>\n                    <Snippet value={JSON.stringify(spec, null, 2)} mode={\"json\"} />\n                </TabPanel>\n                {showDTDL && <TabPanel key=\"dtdl\" value={tab} index={index++}>\n                    <DeviceDTDLSnippet dev={deviceSpecification} />\n                </TabPanel>}\n            </Paper>\n        </div>\n    );\n}\n","import React from \"react\"\nimport IDChip from \"./IDChip\";\nimport { Link } from 'gatsby-theme-material-ui';\nimport { serviceSpecificationFromClassIdentifier } from \"../../../src/jdom/spec\"\nimport ServiceSpecificationCard from \"./ServiceSpecificationCard\";\nimport { Grid } from \"@material-ui/core\";\nimport useGridBreakpoints from \"./useGridBreakpoints\";\nimport Markdown from \"./Markdown\";\nimport DeviceSpecificationSource from \"./DeviceSpecificationSource\";\nimport FirmwareCard from \"./FirmwareCard\"\n\nexport default function DeviceSpecification(props: { device: jdspec.DeviceSpec, showSource?: string }) {\n    const { device, showSource } = props;\n    const gridBreakpoints = useGridBreakpoints();\n\n    return <>\n        <h2 key=\"title\">\n            <Link to={device.link}>{device.name}</Link>\n        </h2>\n        {device.image && <img alt=\"image of the device\" src={`https://raw.githubusercontent.com/microsoft/jacdac/main/devices/${device.image}`} />}\n        {device.description && <Markdown source={device.description} />}\n        {device.repo && <FirmwareCard slug={device.repo} />}\n        {!!device.firmwares.length && <><h3>Firmware identifiers</h3>\n            <ul>\n                {device.firmwares.map(firmware => <li key={firmware}><IDChip id={firmware} filter={`fw:0x${firmware.toString(16)}`} /></li>)}\n            </ul></>}\n        <h3>Services</h3>\n        <Grid container spacing={2}>\n            {device.services.map(sc => serviceSpecificationFromClassIdentifier(sc))\n                .map(spec => <Grid item key={spec.shortId} {...gridBreakpoints}>\n                    <ServiceSpecificationCard specification={spec} />\n                </Grid>)}\n        </Grid>\n        {showSource && <>\n            <h2>Specification</h2>\n            <DeviceSpecificationSource deviceSpecification={device} showMarkdown={true} showDTDL={true} />\n        </>}\n    </>\n}\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jacdac-ts/jacdac-ts/docs/src/components/layout.tsx\";\nimport { Link } from 'gatsby-theme-material-ui';\nimport { deviceSpecificationFromIdentifier } from \"../../../src/jdom/spec\";\nimport DeviceSpecification from \"../components/DeviceSpecification\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <DeviceSpecification device={deviceSpecificationFromIdentifier(props.pageContext.node.id)} showSource={true} mdxType=\"DeviceSpecification\" />\n    <h2 {...{\n      \"id\": \"see-also\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#see-also\",\n        \"aria-label\": \"see also permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`See Also`}</h2>\n    <ul>\n    <li><a href={`https://github.com/microsoft/jacdac/tree/main/devices/`}>Edit specification source</a>.</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}