{"version":3,"sources":["webpack:///./src/components/ServiceSpecificationSource.tsx","webpack:///./src/components/ServiceMarkdown.tsx","webpack:///./src/templates/service.mdx","webpack:///./src/components/Page.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","backgroundColor","palette","background","paper","marginBottom","spacing","pre","margin","padding","whiteSpec","ServiceSpecificationSource","props","classIdentifier","serviceSpecification","showSpecification","classes","useState","tab","setTab","spec","serviceSpecificationFromClassIdentifier","convs","converters","showDTDL","camelName","handleTabChange","event","newValue","index","filter","n","map","i","a11yProps","lang","JSON","stringify","serviceSpecificationToDTDL","shortId","DTMIToRoute","serviceSpecificationDTMI","ServiceMarkdown","node","service","name","source","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","pageContext","isMDXComponent","Page","children"],"mappings":"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","file":"component---src-templates-service-mdx-b9575c56768d4d6ed396.js","sourcesContent":["import React, { useState } from 'react';\n// tslint:disable-next-line: no-submodule-imports\nimport Tabs from '@material-ui/core/Tabs';\n// tslint:disable-next-line: no-submodule-imports\nimport Tab from '@material-ui/core/Tab';\nimport { serviceSpecificationFromClassIdentifier } from '../../../src/jdom/spec';\nimport { Paper, createStyles, makeStyles, Theme } from '@material-ui/core';\nimport TabPanel, { a11yProps } from './ui/TabPanel';\nimport Snippet from './ui/Snippet';\nimport { converters } from '../../../jacdac-spec/spectool/jdspec'\nimport ServiceSpecification from './ServiceSpecification';\nimport { DTMIToRoute, serviceSpecificationDTMI, serviceSpecificationToDTDL } from '../../../src/azure-iot/dtdl'\nimport { Link } from 'gatsby-theme-material-ui';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n        marginBottom: theme.spacing(1)\n    },\n    pre: {\n        margin: \"0\",\n        padding: \"0\",\n        backgroundColor: \"transparent\",\n        whiteSpec: \"pre-wrap\"\n    }\n}));\n\nexport default function ServiceSpecificationSource(props: {\n    classIdentifier?: number,\n    serviceSpecification?: jdspec.ServiceSpec,\n    showSpecification?: boolean\n}) {\n    const { classIdentifier, serviceSpecification, showSpecification } = props;\n    const classes = useStyles();\n    const [tab, setTab] = useState(0);\n    const spec = serviceSpecification || serviceSpecificationFromClassIdentifier(classIdentifier)\n    const convs = converters();\n    const showDTDL = spec?.camelName !== \"system\"\n\n    const handleTabChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n        setTab(newValue);\n    };\n\n    let index = 0;\n    return (\n        <div className={classes.root}>\n            <Paper square>\n                <Tabs value={tab} onChange={handleTabChange} aria-label=\"View specification formats\">\n                    {[\n                        showSpecification && \"Specification\",\n                        \"MakeCode\",\n                        \"TypeScript\",\n                        \"C\",\n                        \"JSON\",\n                        showDTDL && \"Module Twin\"\n                    ]\n                        .filter(n => !!n)\n                        .map((n, i) => <Tab key={n} label={n} {...a11yProps(i)} />)}\n                </Tabs>\n                {showSpecification && <TabPanel key=\"spec\" value={tab} index={index++}>\n                    <ServiceSpecification service={spec} />\n                </TabPanel>}\n                {[\"sts\", \"ts\", \"c\", \"json\"].map((lang, i) =>\n                    <TabPanel key={`conv${lang}`} value={tab} index={index++}>\n                        <Snippet value={() => convs[lang](spec)} mode={lang} />\n                    </TabPanel>)}\n                {showDTDL && <TabPanel key=\"dtdl\" value={tab} index={index++}>\n                    <Snippet value={() => JSON.stringify(serviceSpecificationToDTDL(spec), null, 2)} mode={\"json\"}\n                        download={`dtmi-${spec.shortId}.json`}\n                        url={\"/\" + DTMIToRoute(serviceSpecificationDTMI(spec))}\n                        caption={<><Link to=\"/dtmi\">DTDL</Link> is an open source modelling language developed by Microsoft Azure.</>} />\n                </TabPanel>}\n            </Paper>\n        </div>\n    );\n}\n","import React, { } from \"react\";\nimport IDChip from \"./IDChip\";\nimport Markdown from \"./ui/Markdown\";\nimport { Box, Container } from \"@material-ui/core\";\nimport ServiceSpecificationStatusAlert from \"./ServiceSpecificationStatusAlert\"\nimport { Button, Link } from \"gatsby-theme-material-ui\";\nimport DeviceSpecificationList from \"./DeviceSpecificationList\";\nimport ServiceSpecificationSource from \"./ServiceSpecificationSource\";\n\nexport default function ServiceMarkdown(props: {\n    service: jdspec.ServiceSpec\n}) {\n    const { service: node } = props;\n    const { shortId, name, classIdentifier } = node;\n\n    return <>\n        <ServiceSpecificationStatusAlert specification={node} />\n        <Markdown source={node.source} />\n\n        <div>\n            <Button variant=\"contained\" to={`/services/${shortId}/playground/`}>Playground</Button>\n        </div>\n\n        <h2>Registered Devices</h2>\n        <DeviceSpecificationList requiredServiceClasses={[classIdentifier]} />\n\n        <h2 key=\"spech2\">Exports</h2>\n        <ServiceSpecificationSource key=\"source\"\n            classIdentifier={classIdentifier}\n            showSpecification={false}\n        />\n\n        <h2> See Also</h2>\n        <ul>\n            <li><a href={`https://github.com/microsoft/jacdac/tree/main/services/${shortId}.md`}>Edit specification source</a>.</li>\n            <li>Read <Link to=\"/reference/service-specification\">Service Specification Language</Link> reference</li>\n            <li>Create a new service specification using the <Link to=\"/tools/service-editor\">Service Editor</Link></li>\n            <li>Using services in JavaScript with the <Link to={`/clients/web/jdom`}>Jacdac Object Model (JDOM)</Link></li>\n        </ul>\n    </>\n}","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jacdac-ts/jacdac-ts/docs/src/components/Page.tsx\";\nimport { Link } from 'gatsby-theme-material-ui';\nimport { serviceSpecificationFromClassIdentifier } from \"../../../src/jdom/spec\";\nimport ServiceMarkdown from \"../components/ServiceMarkdown\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <ServiceMarkdown service={serviceSpecificationFromClassIdentifier(props.pageContext.node.classIdentifier)} mdxType=\"ServiceMarkdown\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React, { Fragment } from \"react\";\n\nconst Page = ({ props, children }) => {\n    return <Fragment {...props}>{children}</Fragment>\n}\n\nexport default Page;"],"sourceRoot":""}