{"version":3,"sources":["webpack:///../src/azure-iot/dtdl.ts","webpack:///./src/components/DeviceDTDLSnippet.tsx","webpack:///./src/components/DeviceSpecificationSource.tsx","webpack:///./src/components/DeviceSpecification.tsx","webpack:///./src/templates/device.mdx"],"names":["toDTMI","segments","version","map","seg","toString","replace","join","undefined","toLowerCase","enumDTDI","srv","en","classIdentifier","name","objectSchema","schemas","arraySchema","schema","toSchema","pkt","supportsArray","fields","field","type","isFloat","isSimpleType","test","shift","enums","console","warn","fieldType","length","startRepeats","repeatIndex","findIndex","nonRepeat","slice","repeats","shortName","packetToDTDL","dtdl","kind","description","unit","semantic","indexOf","toUnit","writable","log","escapeName","trim","escapeDisplayName","serviceSpecificationToDTDL","serviceSpecificationDTMI","notes","packets","filter","derived","c","hasEvents","find","hasEnums","Object","keys","push","concat","members","k","displayName","enumValue","enumSchema","deviceSpecificationDTMI","dev","id","deviceSpecificationToDTDL","options","services","serviceSpecificationFromClassIdentifier","uniqueMap","names","forEach","i","shortId","count","serviceSpecificationToComponent","DeviceDTDLSnippet","props","useMemo","JSON","stringify","Snippet","value","mode","download","useStyles","makeStyles","theme","createStyles","root","flexGrow","backgroundColor","palette","background","paper","marginBottom","spacing","pre","margin","padding","whiteSpec","DeviceSpecificationSource","deviceSpecification","showSpecification","showDTDL","showJSON","classes","useState","tab","setTab","spec","index","className","Paper","square","Tabs","onChange","event","newValue","aria-label","n","Tab","key","label","a11yProps","TabPanel","DeviceSpecification","device","showSource","gridBreakpoints","useGridBreakpoints","to","link","Typography","variant","identifierToUrlPath","escapeDeviceIdentifier","company","alt","src","imageDeviceOf","Markdown","source","repo","FirmwareCard","slug","firmwares","firmware","IDChip","Grid","container","sc","item","ServiceSpecificationCard","specification","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","deviceSpecificationFromIdentifier","pageContext","node","parentName","isMDXComponent"],"mappings":"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","file":"component---src-templates-device-mdx-3be41346c8cf56c2e3f8.js","sourcesContent":["/***\n * JACDAC service/device specification to DTDL\n * \n *  DTDL specification: https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md.\n */\n\nimport { serviceSpecificationFromClassIdentifier } from \"../jdom/spec\";\nimport { uniqueMap } from \"../jdom/utils\";\n\nexport const DTDL_REFERENCE_URL = \"https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md\"\nexport const DTDL_NAME = \"Digital Twins Definition Language\"\nconst CONTEXT = \"dtmi:dtdl:context;2\";\n\n// https://github.com/Azure/digital-twin-model-identifier\n// ^dtmi:(?:_+[A-Za-z0-9]|[A-Za-z])(?:[A-Za-z0-9_]*[A-Za-z0-9])?(?::(?:_+[A-Za-z0-9]|[A-Za-z])(?:[A-Za-z0-9_]*[A-Za-z0-9])?)*;[1-9][0-9]{0,8}$\nfunction toDTMI(segments: (string | number)[], version?: number) {\n    return `dtmi:jacdac:${[...segments]\n        .map(seg => typeof seg === \"string\" ? seg : `x${seg.toString(16)}`)\n        .map(seg => seg.replace(/(-|_)/g, ''))\n        .join(':')};${version !== undefined ? version : 1}`.toLowerCase();\n}\n\nfunction toUnit(pkt: jdspec.PacketInfo) {\n    if (pkt.fields.length !== 1)\n        return undefined;\n    const field = pkt.fields[0];\n    if (!field.unit)\n        return undefined;\n\n    /**\n     *     type Unit = \"m\" | \"kg\" | \"g\" | \"s\" | \"A\" | \"K\" | \"cd\" | \"mol\" | \"Hz\" | \"rad\" | \"sr\" | \"N\" | \"Pa\" | \"J\" | \"W\" | \"C\" | \"V\" | \"F\" | \"Ohm\"\n        | \"S\" | \"Wb\" | \"T\" | \"H\" | \"Cel\" | \"lm\" | \"lx\" | \"Bq\" | \"Gy\" | \"Sv\" | \"kat\" | \"m2\" | \"m3\" | \"l\" | \"m/s\" | \"m/s2\" | \"m3/s\" | \"l/s\"\n        | \"W/m2\" | \"cd/m2\" | \"bit\" | \"bit/s\" | \"lat\" | \"lon\" | \"pH\" | \"dB\" | \"dBW\" | \"Bspl\" | \"count\" | \"/\" | \"%RH\" | \"%EL\" | \"EL\"\n        | \"1/s\" | \"1/min\" | \"beat/min\" | \"beats\" | \"S/m\" | \"B\" | \"VA\" | \"VAs\" | \"var\" | \"vars\" | \"J/m\" | \"kg/m3\" | \"deg\";\n\n    type SecondaryUnit = \"ms\" | \"min\" | \"h\" | \"MHz\" | \"kW\" | \"kVA\" | \"kvar\" | \"Ah\" | \"Wh\" | \"kWh\"\n        | \"varh\" | \"kvarh\" | \"kVAh\" | \"Wh/km\" | \"KiB\" | \"GB\" | \"Mbit/s\" | \"B/s\" | \"MB/s\" | \"mV\" | \"mA\" | \"dBm\" | \"ug/m3\"\n        | \"mm/h\" | \"m/h\" | \"ppm\" | \"/100\" | \"/1000\" | \"hPa\" | \"mm\" | \"cm\" | \"km\" | \"km/h\";\n     */\n    const units: jdspec.SMap<{ semantic: string; unit: string; }> = {\n        \"m/s2\": {\n            semantic: \"Acceleration\",\n            unit: \"metrePerSecondSquared\"\n        },\n        \"rad\": {\n            semantic: \"Angle\",\n            unit: \"radian\"\n        },\n        \"rad/s\": {\n            semantic: \"AngularVelocity\",\n            unit: \"radianPerSecond\"\n        },\n        \"rad/s2\": {\n            semantic: \"AngularAcceleration\",\n            unit: \"radianPerSecondSquared\"\n        },\n        \"m\": {\n            semantic: \"Length\",\n            unit: \"metre\"\n        },\n        \"m2\": {\n            semantic: \"Area\",\n            unit: \"squareMetre\"\n        },\n        \"s\": {\n            semantic: \"TimeSpan\",\n            unit: \"second\"\n        },\n        \"ms\": {\n            semantic: \"TimeSpan\",\n            unit: \"millisecond\"\n        },\n        \"us\": {\n            semantic: \"TimeSpan\",\n            unit: \"microsecond\"\n        },\n        \"K\": {\n            semantic: \"Temperature\",\n            unit: \"kelvin\"\n        },\n        \"C\": {\n            semantic: \"Temperature\",\n            unit: \"degreeCelsius\"\n        },\n        \"F\": {\n            semantic: \"Temperature\",\n            unit: \"degreeFahrenheit\"\n        },\n        \"g\": {\n            semantic: \"Acceleration\",\n            unit: \"gForce\"\n        },\n        \"mA\": {\n            semantic: \"Current\",\n            unit: \"milliampere\"\n        },\n        \"uA\": {\n            semantic: \"Current\",\n            unit: \"microampere\"\n        },\n        \"A\": {\n            semantic: \"Current\",\n            unit: \"ampere\"\n        },\n        \"mV\": {\n            semantic: \"Voltage\",\n            unit: \"millivolt\"\n        },\n        \"uV\": {\n            semantic: \"Voltage\",\n            unit: \"microvolt\"\n        },\n        \"V\": {\n            semantic: \"Voltage\",\n            unit: \"volt\"\n        },\n    };\n    const unit = units[field.unit];\n    if (unit)\n        return unit;\n\n    // ignoring some known units\n    if ([\"#\", \"/\"].indexOf(field.unit) > -1)\n        return undefined;\n\n    console.warn(`unsupported unit ${field.unit}`)\n    return undefined;\n}\n\n// https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md#primitive-schemas\n\nfunction enumDTDI(srv: jdspec.ServiceSpec, en: jdspec.EnumInfo): string {\n    return toDTMI([srv.classIdentifier, en.name])\n}\n\nfunction enumSchema(srv: jdspec.ServiceSpec, en: jdspec.EnumInfo): DTDLSchema {\n    const dtdl = {\n        \"@type\": \"Enum\",\n        \"@id\": enumDTDI(srv, en),\n        \"valueSchema\": \"integer\",\n        \"enumValues\": Object.keys(en.members).map(k => ({\n            name: escapeName(k),\n            displayName: k,\n            enumValue: en.members[k]\n        }))\n    }\n    return dtdl;\n}\n\nfunction fieldType(srv: jdspec.ServiceSpec, pkt: jdspec.PacketInfo, field: jdspec.PacketMember) {\n    let type: string;\n    if (field.type == \"bool\")\n        type = \"boolean\";\n    else if (field.isFloat)\n        type = \"float\";\n    else if (field.isSimpleType) {\n        if (/^(u|i)/.test(field.type))\n            type = \"integer\";\n        else if (field.type === \"B\")\n            // base64 encoded binary data\n            type = \"string\";\n    }\n    else if (field.type === \"string\" || field.type == \"string0\")\n        type = \"string\";\n    else if (field.shift && /^(u|i)/.test(field.type))\n        type = \"float\"; // decimal type\n    else {\n        const en = srv.enums[field.type];\n        if (en)\n            type = enumDTDI(srv, en);\n    }\n\n    if (!type)\n        console.warn(`unknown field type ${field.type}`, field)\n\n    return {\n        name: field.name == \"_\" ? pkt.name : field.name,\n        type: type\n    }\n}\n\n// warps fields into an object\nfunction objectSchema(schemas: DTDLSchema[]): DTDLSchema {\n    return {\n        \"@type\": \"Object\",\n        \"fields\": schemas\n    }\n}\n\n// wraps a schema into an array\nfunction arraySchema(schema: string | DTDLSchema): DTDLSchema {\n    return {\n        \"@type\": \"Array\",\n        \"elementSchema\": schema\n    }\n}\n\n// converts JADAC pkt data layout into a DTDL schema\nfunction toSchema(srv: jdspec.ServiceSpec, pkt: jdspec.PacketInfo, supportsArray?: boolean): string | DTDLSchema {\n    const fields = pkt.fields.map(field => fieldType(srv, pkt, field));\n    if (!fields.length)\n        return undefined;\n\n    // a single data entry\n    if (fields.length === 1 && !pkt.fields[0].startRepeats)\n        return fields[0].type;\n\n    // map fields into schema\n    const schemas: DTDLSchema[] =\n        fields.map(field => ({\n            name: field.name,\n            schema: field.type\n        }))\n\n    // is there an array?\n    const repeatIndex = pkt.fields.findIndex(field => field.startRepeats);\n\n    if (repeatIndex < 0) {\n        // no array\n        // wrap schemas into an object\n        return objectSchema(schemas)\n    }\n\n    // check if arrays are supported\n    if (!supportsArray) {\n        console.warn(`arrays not supported in ${srv.shortName}.${pkt.name}`)\n        return undefined;\n    }\n\n    if (repeatIndex == 0) {\n        // the whole structure is an array\n        return arraySchema(objectSchema(schemas))\n    }\n    else {\n        // split fields into prelude and array data\n        const nonRepeat = schemas.slice(0, repeatIndex);\n        const repeats = schemas.slice(repeatIndex);\n        return objectSchema([\n            ...nonRepeat,\n            {\n                name: \"repeat\",\n                schema: arraySchema(repeats.length > 1 ? objectSchema(repeats) : repeats[0])\n            }\n        ]);\n    }\n}\n\nfunction packetToDTDL(srv: jdspec.ServiceSpec, pkt: jdspec.PacketInfo): DTDLContent {\n    const types: jdspec.SMap<string> = {\n        \"const\": \"Property\",\n        \"rw\": \"Property\",\n        \"ro\": \"Property\",\n        \"event\": \"Telemetry\"\n    }\n    const dtdl: any = {\n        \"@type\": types[pkt.kind] || `Unsupported${pkt.kind}`,\n        name: pkt.name,\n        \"@id\": toDTMI([srv.classIdentifier, pkt.kind, pkt.name]),\n        description: pkt.description,\n    }\n    switch (pkt.kind) {\n        case \"report\":\n        case \"command\":\n            // https://docs.microsoft.com/en-us/azure/digital-twins/concepts-models#azure-digital-twins-dtdl-implementation-specifics\n            return undefined;\n        case \"const\":\n        case \"rw\":\n        case \"ro\":\n        case \"event\":\n            const unit = toUnit(pkt);\n            if (unit) {\n                dtdl.unit = unit.unit;\n            }\n            dtdl.schema = toSchema(srv, pkt, false)\n            if (pkt.kind === \"rw\")\n                dtdl.writable = true;\n            if (!dtdl.schema && pkt.kind === \"event\") {\n                // keep a count of the events\n                dtdl[\"@type\"] = [dtdl[\"@type\"], \"Event\"]\n                dtdl.schema = toDTMI([srv.classIdentifier, \"event\"]);\n            }\n            else if (unit && unit.semantic)\n                dtdl[\"@type\"] = [dtdl[\"@type\"], unit.semantic]\n            break;\n        default:\n            console.log(`unknown packet kind ${pkt.kind}`)\n            break;\n    }\n\n    if (!dtdl.schema) {\n        console.log(`unknown schema for ${srv.name}.${pkt.name}`);\n        return undefined;\n    }\n\n    return dtdl;\n}\n\n\ninterface DTDLNode {\n    '@type'?: string;\n    '@id'?: string;\n    // 1-64 characters\n    // ^[a-zA-Z](?:[a-zA-Z0-9_]*[a-zA-Z0-9])?$\n    name?: string;\n    displayName?: string,\n    description?: string;\n}\n\ninterface DTDLSchema extends DTDLNode {\n    fields?: DTDLSchema[];\n    schema?: string | DTDLSchema;\n    elementSchema?: string | DTDLSchema;\n}\n\ninterface DTDLContent extends DTDLNode {\n    '@type': \"Property\" | \"Command\" | \"Component\" | \"Interface\";\n    unit?: string;\n    schema?: string | DTDLSchema;\n}\n\ninterface DTDLInterface extends DTDLContent {\n    contents: DTDLContent[];\n    schemas?: (DTDLSchema | DTDLInterface)[];\n    '@context'?: string;\n}\n\nfunction escapeName(name: string) {\n    name = name.trim().replace(/[^a-zA-Z0-9_]/g, '_');\n    if (!/^[a-zA-Z]/.test(name))\n        name = \"a\" + name;\n    name = name[0].toLowerCase() + name.slice(1);\n    return name.slice(0, 64);\n}\n\nfunction escapeDisplayName(name: string) {\n    return name.slice(0, 64);\n}\n\nexport function serviceSpecificationToDTDL(srv: jdspec.ServiceSpec): DTDLInterface {\n    const dtdl: DTDLInterface = {\n        \"@type\": \"Interface\",\n        \"@id\": serviceSpecificationDTMI(srv),\n        \"displayName\": escapeDisplayName(srv.name),\n        \"description\": srv.notes[\"short\"],\n        \"contents\": srv.packets\n            .filter(pkt => !pkt.derived)\n            .map(pkt => packetToDTDL(srv, pkt)).filter(c => !!c)\n    }\n    const hasEvents = srv.packets.find(pkt => pkt.kind === \"event\");\n    const hasEnums = Object.keys(srv.enums).length;\n    if (hasEvents || hasEnums) {\n        dtdl.schemas = [];\n        if (hasEvents)\n            dtdl.schemas.push({\n                \"@id\": toDTMI([srv.classIdentifier, \"event\"]),\n                \"@type\": \"Object\",\n                \"fields\": [{\n                    \"name\": \"count\",\n                    \"schema\": \"integer\"\n                }]\n            });\n        if (hasEnums)\n            dtdl.schemas = dtdl.schemas.concat(Object.keys(srv.enums).map(en => enumSchema(srv, srv.enums[en])));\n    }\n    dtdl[\"@context\"] = CONTEXT\n    return dtdl;\n}\n\nfunction serviceSpecificationToComponent(srv: jdspec.ServiceSpec, name: string): any {\n    const dtdl = {\n        \"@type\": \"Component\",\n        \"name\": name,\n        \"displayName\": escapeDisplayName(srv.name),\n        \"schema\": serviceSpecificationDTMI(srv)\n    }\n    return dtdl;\n}\n\nexport interface DTDLGenerationOptions {\n    services?: boolean; // generate all services\n}\n\nexport function serviceSpecificationDTMI(srv: jdspec.ServiceSpec) {\n    return toDTMI([\"services\", srv.classIdentifier])\n}\n\nexport function deviceSpecificationDTMI(dev: jdspec.DeviceSpec) {\n    return toDTMI([\"devices\", dev.id.replace(/-/g, ':')]);\n}\n\nexport function deviceSpecificationToDTDL(dev: jdspec.DeviceSpec, options?: DTDLGenerationOptions): any {\n    const services = dev.services.map(srv => serviceSpecificationFromClassIdentifier(srv));\n    const uniqueServices = uniqueMap(services, srv => srv.classIdentifier.toString(), srv => srv);\n    const schemas = uniqueServices.map(srv => serviceSpecificationToDTDL(srv));\n\n    // allocate names\n    let names: string[] = [];\n    services.forEach((srv, i) => {\n        let name = escapeName(srv.shortId || srv.shortName)\n        if (names.indexOf(name) < 0)\n            names.push(name)\n        else {\n            let count = 2;\n            while (names.indexOf(name + count) > -1)\n                count++;\n            names.push(name + count);\n        }\n    })\n\n    const dtdl: DTDLInterface = {\n        \"@type\": \"Interface\",\n        \"@id\": deviceSpecificationDTMI(dev),\n        \"displayName\": escapeDisplayName(dev.name),\n        \"description\": dev.description,\n        \"contents\": services.map((srv, i) => serviceSpecificationToComponent(srv, names[i])),\n        \"@context\": CONTEXT\n    }\n    if (options?.services)\n        return [dtdl, ...schemas]\n    else\n        return dtdl\n}\n","import React, { useMemo } from \"react\";\nimport { deviceSpecificationToDTDL } from \"../../../src/azure-iot/dtdl\";\nimport Snippet from \"./Snippet\";\n\nexport function\n    DeviceDTDLSnippet(props: { dev: jdspec.DeviceSpec }) {\n    const { dev } = props;\n\n    const dtdl = useMemo<string>(\n        () => JSON.stringify(deviceSpecificationToDTDL(dev, { services: true }), null, 2),\n        [dev]);\n\n    return <Snippet value={dtdl} mode=\"json\" download={`${dev.name}.json`} />\n}","import React, { useMemo, useState } from 'react';\n// tslint:disable-next-line: no-submodule-imports\nimport Tabs from '@material-ui/core/Tabs';\n// tslint:disable-next-line: no-submodule-imports\nimport Tab from '@material-ui/core/Tab';\nimport { Paper, createStyles, makeStyles, Theme } from '@material-ui/core';\nimport TabPanel, { a11yProps } from './TabPanel';\nimport Snippet from './Snippet';\nimport DeviceSpecification from './DeviceSpecification';\nimport { DeviceDTDLSnippet } from './DeviceDTDLSnippet';\nimport { deviceSpecificationToMarkdown } from '../../../src/jdom/spec';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n        marginBottom: theme.spacing(1)\n    },\n    pre: {\n        margin: \"0\",\n        padding: \"0\",\n        backgroundColor: \"transparent\",\n        whiteSpec: \"pre-wrap\"\n    }\n}));\n\nexport default function DeviceSpecificationSource(props: {\n    deviceSpecification?: jdspec.DeviceSpec,\n    showSpecification?: boolean,\n    showDTDL?: boolean,\n    showJSON?: boolean\n}) {\n    const { deviceSpecification, showSpecification, showDTDL, showJSON } = props;\n    const classes = useStyles();\n    const [tab, setTab] = useState(0);\n    const spec = deviceSpecification\n\n    const handleTabChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n        setTab(newValue);\n    };\n\n    let index = 0;\n    return (\n        <div className={classes.root}>\n            <Paper square>\n                <Tabs value={tab} onChange={handleTabChange} aria-label=\"View specification formats\">\n                    {[\n                        showSpecification && \"Specification\",\n                        showJSON && \"JSON\",\n                        showDTDL && \"DTDL\",\n                    ].filter(n => !!n)\n                        .map((n, i) => <Tab key={n} label={n} {...a11yProps(i)} />)}\n                </Tabs>\n                {showSpecification && <TabPanel key=\"spec\" value={tab} index={index++}>\n                    <DeviceSpecification device={spec} />\n                </TabPanel>}\n                {showJSON && <TabPanel key={`convjson`} value={tab} index={index++}>\n                    <Snippet value={JSON.stringify(spec, null, 2)} mode={\"json\"} />\n                </TabPanel>}\n                {showDTDL && <TabPanel key=\"dtdl\" value={tab} index={index++}>\n                    <DeviceDTDLSnippet dev={deviceSpecification} />\n                </TabPanel>}\n            </Paper>\n        </div>\n    );\n}\n","import React from \"react\"\nimport IDChip from \"./IDChip\";\nimport { Link } from 'gatsby-theme-material-ui';\nimport { identifierToUrlPath, imageDeviceOf, serviceSpecificationFromClassIdentifier } from \"../../../src/jdom/spec\"\nimport ServiceSpecificationCard from \"./ServiceSpecificationCard\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport useGridBreakpoints from \"./useGridBreakpoints\";\nimport Markdown from \"./Markdown\";\nimport DeviceSpecificationSource from \"./DeviceSpecificationSource\";\nimport FirmwareCard from \"./FirmwareCard\"\nimport { escapeDeviceIdentifier } from \"../../../jacdac-spec/spectool/jdspec\"\n\nexport default function DeviceSpecification(props: { device: jdspec.DeviceSpec, showSource?: string }) {\n    const { device, showSource } = props;\n    const gridBreakpoints = useGridBreakpoints();\n\n    return <>\n        <h2 key=\"title\">\n            <Link to={device.link}>{device.name}</Link>\n        </h2>\n        <Typography variant=\"subtitle1\">by <Link to={`/devices/${identifierToUrlPath(escapeDeviceIdentifier(device.company))}`}>{device.company}</Link></Typography>\n        {<img alt=\"image of the device\" src={imageDeviceOf(device)} />}\n        {device.description && <Markdown source={device.description} />}\n        {device.repo && <FirmwareCard slug={device.repo} />}\n        {!!device.firmwares.length && <><h3>Firmware identifiers</h3>\n            <ul>\n                {device.firmwares.map(firmware => <li key={firmware}><IDChip id={firmware} filter={`fw:0x${firmware.toString(16)}`} /></li>)}\n            </ul></>}\n        <h3>Services</h3>\n        <Grid container spacing={2}>\n            {device.services.map(sc => serviceSpecificationFromClassIdentifier(sc))\n                .map(spec => <Grid item key={spec.shortId} {...gridBreakpoints}>\n                    <ServiceSpecificationCard specification={spec} />\n                </Grid>)}\n        </Grid>\n        {showSource && <>\n            <h2>Specification</h2>\n            <DeviceSpecificationSource deviceSpecification={device}\n                showJSON={true} showDTDL={true} />\n        </>}\n    </>\n}\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jacdac-ts/jacdac-ts/docs/src/components/layout.tsx\";\nimport { Link } from 'gatsby-theme-material-ui';\nimport { deviceSpecificationFromIdentifier } from \"../../../src/jdom/spec\";\nimport DeviceSpecification from \"../components/DeviceSpecification\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <DeviceSpecification device={deviceSpecificationFromIdentifier(props.pageContext.node.id)} showSource={true} mdxType=\"DeviceSpecification\" />\n    <h2 {...{\n      \"id\": \"see-also\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#see-also\",\n        \"aria-label\": \"see also permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`See Also`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/jacdac-ts/reference/device-definition\"\n        }}>{`device definition`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/jacdac-ts/tools/device-designer\"\n        }}>{`device designer`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}