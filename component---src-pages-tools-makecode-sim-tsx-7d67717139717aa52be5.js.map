{"version":3,"sources":["webpack:///./src/pages/tools/makecode-sim.tsx","webpack:///../src/jdom/iframebridgeclient.ts","webpack:///./src/jacdac/Provider.tsx","webpack:///./src/components/ThemedLayout.tsx","webpack:///./node_modules/@material-ui/core/esm/styles/cssUtils.js","webpack:///./node_modules/@material-ui/core/esm/styles/responsiveFontSizes.js"],"names":["Page","rawTheme","createMuiTheme","palette","primary","main","secondary","theme","responsiveFontSizes","IFrameBridgeClient","bus","bridgeId","Math","random","postPacket","bind","handleMessage","registerEvents","console","log","this","mount","subscribe","PACKET_PROCESS","PACKET_SEND","window","addEventListener","removeEventListener","event","isOriginValid","msg","data","channel","type","pkt","Packet","fromBinary","timestamp","sender","sendPacketAsync","processPacket","broadcast","toBuffer","parent","postMessage","origin","JDIFrameClient","args","URLSearchParams","diagnostic","webUSB","params","location","search","diagnostics","get","parentOrigin","sniffQueryArguments","Flags","createUSBBus","undefined","JDBus","setBackgroundFirmwareScans","inIFrame","JACDACProvider","children","useState","firstConnect","setFirstConnect","connectionState","setConnectionState","useEffect","BusState","Disconnected","connectAsync","CONNECTION_STATE","Provider","value","disconnectAsync","ThemedLayout","props","maxSnack","ThemeProvider","isUnitless","String","parseFloat","length","toUnitless","convertLength","baseFontSize","toUnit","fromUnit","match","pxLength","outputLength","toFixed","alignProperty","_ref","size","grid","sizeBelow","sizeAbove","fontGrid","_ref2","lineHeight","pixels","htmlFontSize","responsiveProperty","_ref3","cssProperty","min","max","_ref3$unit","unit","_ref3$breakpoints","breakpoints","_ref3$transform","transform","output","concat","factor","forEach","breakpoint","round","themeInput","options","arguments","_options$breakpoints","_options$disableAlign","disableAlign","_options$factor","_options$variants","variants","typography","convert","breakpointValues","map","x","values","variant","style","remFontSize","fontSize","maxFontSize","minFontSize","Error"],"mappings":"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","file":"component---src-pages-tools-makecode-sim-tsx-7d67717139717aa52be5.js","sourcesContent":["import React from \"react\"\nimport DeviceList from \"../../components/DeviceList\";\nimport { createMuiTheme, responsiveFontSizes } from \"@material-ui/core\";\nimport ThemedLayout from \"../../components/ThemedLayout\";\n\nexport default function Page() {\n    const rawTheme = createMuiTheme({\n        palette: {\n            primary: {\n                main: '#2e7d32',\n            },\n            secondary: {\n                main: '#ffc400',\n            },\n        }\n    })\n    const theme = responsiveFontSizes(rawTheme);\n    return <ThemedLayout theme={theme}>\n        <DeviceList />\n    </ThemedLayout>\n}\n","import { JDBus } from \"./bus\";\nimport { PACKET_PROCESS, PACKET_SEND } from \"./constants\";\nimport JDIFrameClient from \"./iframeclient\";\nimport Packet from \"./packet\";\nimport { crc } from \"./utils\";\n\nexport interface PacketMessage {\n    channel: \"jacdac\";\n    type: \"messagepacket\";\n    broadcast: true;\n    data: Uint8Array;\n}\n\n/**\n * A client that bridges received and sent packets to a parent iframe\n */\nexport default class IFrameBridgeClient extends JDIFrameClient {\n    // this is a unique id used to trace packets sent by this bridge\n    readonly bridgeId = \"bridge\" + Math.random();\n    constructor(readonly bus: JDBus) {\n        super(bus)\n        this.postPacket = this.postPacket.bind(this);\n        this.handleMessage = this.handleMessage.bind(this);\n        this.registerEvents();\n    }\n\n    private registerEvents() {\n        console.log(`jdiframe: listening for packets`)\n        this.mount(this.bus.subscribe(PACKET_PROCESS, this.postPacket));\n        this.mount(this.bus.subscribe(PACKET_SEND, this.postPacket))\n\n        window.addEventListener(\"message\", this.handleMessage, false);\n        this.mount(() => window.removeEventListener(\"message\", this.handleMessage, false))\n    }\n\n    private handleMessage(event: MessageEvent) {\n        if (!this.isOriginValid(event))\n            return;\n\n        const msg = event.data as PacketMessage;\n        if (!msg\n            || msg.channel !== \"jacdac\"\n            || msg.type !== \"messagepacket\")\n            return; // not our message\n\n        const pkt = Packet.fromBinary(msg.data, this.bus.timestamp);\n        if (!pkt)\n            return;\n\n        // we're adding a little trace to avoid resending our own packets\n        pkt.sender = this.bridgeId;\n\n        // send to native bus\n        this.bus.sendPacketAsync(pkt);\n        // send to javascript bus\n        this.bus.processPacket(pkt);\n    }\n\n    private postPacket(pkt: Packet) {\n        // check we sent this packet\n        if (pkt.sender === this.bridgeId)\n            return;\n\n        const msg: PacketMessage = {\n            type: \"messagepacket\",\n            channel: \"jacdac\",\n            broadcast: true,\n            data: pkt.toBuffer()\n        }\n        // may not be in iframe\n        window.parent?.postMessage(msg, this.origin)\n    }\n}","import React, { useState, useEffect } from \"react\";\nimport JACDACContext from \"../../../src/react/Context\";\nimport { BusState, JDBus } from \"../../../src/jdom/bus\";\nimport { createUSBBus } from \"../../../src/jdom/usb\";\nimport { CONNECTION_STATE } from \"../../../src/jdom/constants\";\nimport IFrameBridgeClient from \"../../../src/jdom/iframebridgeclient\"\nimport { inIFrame } from \"../../../src/jdom/iframeclient\";\nimport Flags from \"../../../src/jdom/flags\"\n\nfunction sniffQueryArguments() {\n    if (typeof window === \"undefined\" || typeof URLSearchParams === \"undefined\")\n        return {\n            diagnostic: false,\n            webUSB: true,\n        };\n\n    const params = new URLSearchParams(window.location.search)\n    return {\n        diagnostics: params.get(`dbg`) === \"1\",\n        webUSB: params.get(`webusb`) !== \"0\",\n        parentOrigin: params.get('parentOrigin')\n    }\n}\n\nconst args = sniffQueryArguments();\nFlags.diagnostics = args.diagnostics;\nFlags.webUSB = args.webUSB;\n\nconst bus = Flags.webUSB ? createUSBBus(undefined, { parentOrigin: args.parentOrigin })\n    : new JDBus(undefined);\nbus.setBackgroundFirmwareScans(true);\n// tslint:disable-next-line: no-unused-expression\nif (inIFrame()) {\n    new IFrameBridgeClient(bus); // start bridge\n}\n\n\nconst JACDACProvider = ({ children }) => {\n    const [firstConnect, setFirstConnect] = useState(false)\n    const [connectionState, setConnectionState] = useState(bus.connectionState);\n\n    // connect in background on first load\n    useEffect(() => {\n        if (!firstConnect && bus.connectionState == BusState.Disconnected) {\n            setFirstConnect(true)\n            bus.connectAsync(true);\n        }\n        return () => { }\n    }, [])\n\n    // subscribe to connection state changes\n    useEffect(() => bus.subscribe<BusState>(CONNECTION_STATE, connectionState => setConnectionState(connectionState)), [])\n\n    const connectAsync = () => bus.connectAsync();\n    const disconnectAsync = () => bus.disconnectAsync();\n    return (\n        <JACDACContext.Provider value={{ bus, connectionState, connectAsync, disconnectAsync }}>\n            {children}\n        </JACDACContext.Provider>\n    )\n}\n\nexport default JACDACProvider;\n","import { Theme, ThemeProvider } from \"@material-ui/core\";\nimport { ConfirmProvider } from \"material-ui-confirm\";\nimport { SnackbarProvider } from \"notistack\";\nimport React from \"react\";\nimport { IdProvider } from \"react-use-id-hook\";\nimport JACDACProvider from \"../jacdac/Provider\";\nimport { AppProvider } from \"./AppContext\";\nimport { DbProvider } from \"./DbContext\";\nimport { PacketsProvider } from \"./PacketsContext\";\nimport { ServiceManagerProvider } from \"./ServiceManagerContext\";\n\nexport default function ThemedLayout(props: { theme: Theme, maxSnack?: number, children: any }) {\n    const { theme, maxSnack, children } = props;\n    return (\n        <ThemeProvider theme={theme}>\n            <SnackbarProvider maxSnack={maxSnack || 1}>\n                <IdProvider>\n                    <ConfirmProvider>\n                        <DbProvider>\n                            <JACDACProvider>\n                                <ServiceManagerProvider>\n                                    <PacketsProvider>\n                                        <AppProvider>\n                                            {children}\n                                        </AppProvider>\n                                    </PacketsProvider>\n                                </ServiceManagerProvider>\n                            </JACDACProvider>\n                        </DbProvider>\n                    </ConfirmProvider>\n                </IdProvider>\n            </SnackbarProvider>\n        </ThemeProvider>\n    )\n}","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nexport function isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n} // Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\n\nexport function getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n} // Emulate the sass function \"unitless\"\n\nexport function toUnitless(length) {\n  return parseFloat(length);\n} // Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\n\nexport function convertLength(baseFontSize) {\n  return function (length, toUnit) {\n    var fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.\n\n    if (fromUnit === toUnit) {\n      return length;\n    } // Convert input length to pixels.\n\n\n    var pxLength = toUnitless(length);\n\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n        return length;\n      }\n    } // Convert length in pixels to the output unit\n\n\n    var outputLength = pxLength;\n\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nexport function alignProperty(_ref) {\n  var size = _ref.size,\n      grid = _ref.grid;\n  var sizeBelow = size - size % grid;\n  var sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\n\nexport function fontGrid(_ref2) {\n  var lineHeight = _ref2.lineHeight,\n      pixels = _ref2.pixels,\n      htmlFontSize = _ref2.htmlFontSize;\n  return pixels / (lineHeight * htmlFontSize);\n}\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n *\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\n\nexport function responsiveProperty(_ref3) {\n  var cssProperty = _ref3.cssProperty,\n      min = _ref3.min,\n      max = _ref3.max,\n      _ref3$unit = _ref3.unit,\n      unit = _ref3$unit === void 0 ? 'rem' : _ref3$unit,\n      _ref3$breakpoints = _ref3.breakpoints,\n      breakpoints = _ref3$breakpoints === void 0 ? [600, 960, 1280] : _ref3$breakpoints,\n      _ref3$transform = _ref3.transform,\n      transform = _ref3$transform === void 0 ? null : _ref3$transform;\n\n  var output = _defineProperty({}, cssProperty, \"\".concat(min).concat(unit));\n\n  var factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(function (breakpoint) {\n    var value = min + factor * breakpoint;\n\n    if (transform !== null) {\n      value = transform(value);\n    }\n\n    output[\"@media (min-width:\".concat(breakpoint, \"px)\")] = _defineProperty({}, cssProperty, \"\".concat(Math.round(value * 10000) / 10000).concat(unit));\n  });\n  return output;\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\";\nimport { isUnitless, convertLength, responsiveProperty, alignProperty, fontGrid } from './cssUtils';\nexport default function responsiveFontSizes(themeInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$breakpoints = options.breakpoints,\n      breakpoints = _options$breakpoints === void 0 ? ['sm', 'md', 'lg'] : _options$breakpoints,\n      _options$disableAlign = options.disableAlign,\n      disableAlign = _options$disableAlign === void 0 ? false : _options$disableAlign,\n      _options$factor = options.factor,\n      factor = _options$factor === void 0 ? 2 : _options$factor,\n      _options$variants = options.variants,\n      variants = _options$variants === void 0 ? ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline'] : _options$variants;\n\n  var theme = _extends({}, themeInput);\n\n  theme.typography = _extends({}, theme.typography);\n  var typography = theme.typography; // Convert between css lengths e.g. em->px or px->rem\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\n\n  var convert = convertLength(typography.htmlFontSize);\n  var breakpointValues = breakpoints.map(function (x) {\n    return theme.breakpoints.values[x];\n  });\n  variants.forEach(function (variant) {\n    var style = typography[variant];\n    var remFontSize = parseFloat(convert(style.fontSize, 'rem'));\n\n    if (remFontSize <= 1) {\n      return;\n    }\n\n    var maxFontSize = remFontSize;\n    var minFontSize = 1 + (maxFontSize - 1) / factor;\n    var lineHeight = style.lineHeight;\n\n    if (!isUnitless(lineHeight) && !disableAlign) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: Unsupported non-unitless line height with grid alignment.\\nUse unitless line heights instead.\" : _formatMuiErrorMessage(6));\n    }\n\n    if (!isUnitless(lineHeight)) {\n      // make it unitless\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\n    }\n\n    var transform = null;\n\n    if (!disableAlign) {\n      transform = function transform(value) {\n        return alignProperty({\n          size: value,\n          grid: fontGrid({\n            pixels: 4,\n            lineHeight: lineHeight,\n            htmlFontSize: typography.htmlFontSize\n          })\n        });\n      };\n    }\n\n    typography[variant] = _extends({}, style, responsiveProperty({\n      cssProperty: 'fontSize',\n      min: minFontSize,\n      max: maxFontSize,\n      unit: 'rem',\n      breakpoints: breakpointValues,\n      transform: transform\n    }));\n  });\n  return theme;\n}"],"sourceRoot":""}