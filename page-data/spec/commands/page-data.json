{"componentChunkName":"component---src-components-spec-tsx","path":"/spec/commands/","result":{"data":{"mdx":{"id":"afc29634-b332-5e17-9a9a-6cc210475aa1","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Commands\",\n  \"order\": 3\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"commands\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#commands\",\n    \"aria-label\": \"commands permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Commands\"), mdx(\"p\", null, \"Command codes are partitioned as follows:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0x0000-0x007f\"), \" - commands common to all services, defined in \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"jdprotocol.h\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0x0080-0x0eff\"), \" - commands defined per-service\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0x0f00-0x0fff\"), \" - reserved for implementation, should not be used on wire\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0x1000-0x1fff\"), \" - register read commands\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0x2000-0x2fff\"), \" - register write commands\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0x3000-0xffff\"), \" - reserved for future use\")), mdx(\"h2\", {\n    \"id\": \"virtual-registers\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#virtual-registers\",\n    \"aria-label\": \"virtual registers permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Virtual registers\"), mdx(\"p\", null, \"Devices can expose virtual registers.\\nEach register is logically between 1 bit and 236 bytes in size.\\nIf register is written with a value shorter than register size, the\\nvalue is zero-extended or sign-extended depending on register.\"), mdx(\"p\", null, \"Registers are identified by 12 bit indices, called register codes, and not memory addresses\\nand are non-overlapping.\\nFor example, it's possible to have register \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0x090\"), \" of size \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"12\"), \"\\nand non-overlapping register \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0x091\"), \" of size \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"4\"), \".\"), mdx(\"p\", null, \"Register codes are partitioned as follows:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0x001-0x07f\"), \" - r/w common to all services\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0x080-0x0ff\"), \" - r/w defined per-service\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0x100-0x17f\"), \" - r/o common to all services\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0x180-0x1ff\"), \" - r/o defined per-service\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0x200-0xeff\"), \" - custom, defined per-service - best avoided\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0xf00-0xfff\"), \" - reserved for implementation, should not be on the wire\")), mdx(\"p\", null, \"To read register \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0x023\"), \" send a command \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0x1023\"), \".\\nA \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0x1023\"), \" report will contain the current value.\\nTo write that register, send \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0x2023\"), \" command.\"), mdx(\"h2\", {\n    \"id\": \"registers-vs-commands\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#registers-vs-commands\",\n    \"aria-label\": \"registers vs commands permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Registers vs commands\"), mdx(\"p\", null, \"Client implementations should:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"before the client device is connected, queue up all commands\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"when the client device enumerates, send all these commands\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"when the client device re-attaches (eg., resets), all register-set commands (but not other commands) should be re-send\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"when queuing up commands, only queue one instance per each command (including one instance per register)\")), mdx(\"p\", null, \"These requirements can be used as guideline when to use a register vs a command\\nin a service design.\"), mdx(\"h2\", {\n    \"id\": \"pipes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#pipes\",\n    \"aria-label\": \"pipes permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Pipes\"), mdx(\"p\", null, \"Pipes are application-level mechanism for establishing reliable one- and two-way\\npoint-to-point data links.\"), mdx(\"p\", null, \"Typical packet loss in JACDAC networks is well under 1%.\\nAnything that can withstand such packet loss \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"should not\"), \" be done over a pipe,\\nas pipes have quite big overhead.\"), mdx(\"p\", null, \"Typical applications where pipes should be used:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a WiFi service, where the pipe represents a TCP connection\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"when a response to a command doesn't fit in one packet (eg. WiFi scan results)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"when events need to be delivered reliably (eg., RFID reader)\")), mdx(\"p\", null, \"Pipes should generally not be used for:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"streaming sensor data (sensor events are OK)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"video data\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"audio data\")), mdx(\"p\", null, \"The way to initially establish a pipe depends on service, but typically\\ndevice A would send a command to device B to establish a pipe.\\nDevice A would include its device identifier and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"port\"), \"\\n(a 9 bit number of A's choosing; there would normally be one port per pipe) in the command.\\nIf a two-way communication is desired, device B could then state the port on its side.\"), mdx(\"p\", null, \"Both devices can then start sending commands to their respective ports.\\nThe pipe commands use a fixed service number of \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0x3e\"), \" and set the require-ACK\\nflag on frames.\\nThe service command is split as follows:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), \"Bits\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), \"4:0\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Wrap around packet counter\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), \"6:5\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Content type\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), \"15:7\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Port number\")))), mdx(\"p\", null, \"The packet counter starts at \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0x0\"), \" goes up to \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0x1f\"), \", and then back to \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0x0\"), \".\\nRationale: there can be up to 30 non-empty packets in a frame.\"), mdx(\"p\", null, \"Content type is:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0\"), \" for regular pipe data\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"1\"), \" for regular pipe data after which the pipe is to be closed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"2\"), \" for service-specific out-of-band meta-data\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"3\"), \" is reserved\")), mdx(\"p\", null, \"The sending protocol is:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"wait for any data that needs to be sent over the pipe\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"send it as a command; wait for ACK\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"if we timeout waiting for ACK, repeat previous step\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"if we repeated 10 times already, close the pipe\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"increment the pipe counter\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"go back to the first step\")), mdx(\"p\", null, \"The wait for ACK should follow exponential back-off, starting with 1ms up to 1024ms.\"), mdx(\"p\", null, \"The receiving protocol keeps a counter for each pipe. This counter starts at 0.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"when a pipe command is received, ACK it (this is usually done generically, not only for pipes)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"if stored counter for pipe doesn't match the counter in the packet, drop the packet\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"increment stored counter\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"process data in packet\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"repeat\")), mdx(\"p\", null, \"The protocol above has an effective window of 1.\\nThe counter allows increasing that up to 31, but this would require dealing with\\nmultiple packets per frame and is currently out of scope.\"), mdx(\"p\", null, \"Pipes should be considered closed when the device at the other end resets.\"), mdx(\"p\", null, \"TODO: Zero-length pipe commands can be sent as keep-alive packets.\\nIs this needed? \"), mdx(\"p\", null, \"Note that pipes are transmit streams of JACDAC packets, not streams of bytes.\\nThey should not be recombined at any layer in the implementation.\\nFor example, a command that returns a list of things can send each thing in a separate\\npipe packet, without any additional info about how to chunk the data\\n(provided each thing fits in a packet).\\nMultiple packets can be grouped in a frame, but are still handled separately at the\\ndestination.\"), mdx(\"h2\", {\n    \"id\": \"event-subscriptions\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#event-subscriptions\",\n    \"aria-label\": \"event subscriptions permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Event subscriptions\"), mdx(\"p\", null, \"A device like accelerometer can send events eg. when a 2g shock is detected,\\nwhen it's moved face-down, etc.\\nThese events a normally just broadcast on the bus, using standard command \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"0x001\"), \".\"), mdx(\"p\", null, \"For reliable event delivery, a pipe can be established, and events delivered\\nover that pipe.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Commands"}}},"pageContext":{"id":"afc29634-b332-5e17-9a9a-6cc210475aa1"}}}