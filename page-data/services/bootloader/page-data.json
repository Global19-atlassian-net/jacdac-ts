{"componentChunkName":"component---src-templates-service-mdx","path":"/services/bootloader/","result":{"pageContext":{"frontmatter":{},"node":{"name":"Bootloader","shortName":"Bootloader","shortId":"bootloader","classIdentifier":536516936,"extends":[],"notes":{"short":"Allows flashing (reprogramming) devices over JACDAC."},"packets":[{"kind":"command","name":"info","identifier":0,"description":"The `service_class` is always `0x1ffa9948`. The `device_class` identifies the kind of firmware\nthat \"fits\" this device.","derived":null,"fields":[]},{"kind":"report","name":"info","identifier":0,"description":"The `service_class` is always `0x1ffa9948`. The `device_class` identifies the kind of firmware\nthat \"fits\" this device.","derived":null,"fields":[{"name":"service_class","unit":"","type":"u32","storage":4,"defaultValue":null,"isSimpleType":true,"typicalMin":null,"typicalMax":null},{"name":"page_size","unit":"bytes","type":"u32","storage":4,"defaultValue":null,"isSimpleType":true,"typicalMin":null,"typicalMax":null},{"name":"flashable_size","unit":"bytes","type":"u32","storage":4,"defaultValue":null,"isSimpleType":true,"typicalMin":null,"typicalMax":null},{"name":"device_class","unit":"","type":"u32","storage":4,"defaultValue":null,"isSimpleType":true,"typicalMin":null,"typicalMax":null}]},{"kind":"command","name":"set_session","identifier":129,"description":"The flashing host should generate a random id, and use this command to set it.","derived":null,"fields":[{"name":"session_id","unit":"","type":"u32","storage":4,"defaultValue":null,"isSimpleType":true,"typicalMin":null,"typicalMax":null}]},{"kind":"report","name":"set_session","identifier":129,"description":"The flashing host should generate a random id, and use this command to set it.","derived":null,"fields":[{"name":"session_id","unit":"","type":"u32","storage":4,"defaultValue":null,"isSimpleType":true,"typicalMin":null,"typicalMax":null}]},{"kind":"command","name":"page_data","identifier":128,"description":"Use to send flashing data. A physical page is split into `chunk_max + 1` chunks, where `chunk_no = 0 ... chunk_max`.\nEach chunk is stored at `page_address + page_offset`. `page_address` has to be equal in all chunks,\nand is included in response.\nOnly the last chunk causes writing to flash and elicits response.\n\nErrors not listed are also possible. Errors larger than `0xffff` indicate de-synchronization on chunk numbers.","derived":null,"fields":[{"name":"page_address","unit":"","type":"u32","storage":4,"defaultValue":null,"isSimpleType":true,"typicalMin":null,"typicalMax":null},{"name":"page_offset","unit":"","type":"u16","storage":2,"defaultValue":null,"isSimpleType":true,"typicalMin":null,"typicalMax":null},{"name":"chunk_no","unit":"","type":"u8","storage":1,"defaultValue":null,"isSimpleType":true,"typicalMin":null,"typicalMax":null},{"name":"chunk_max","unit":"","type":"u8","storage":1,"defaultValue":null,"isSimpleType":true,"typicalMin":null,"typicalMax":null},{"name":"session_id","unit":"","type":"u32","storage":4,"defaultValue":null,"isSimpleType":true,"typicalMin":null,"typicalMax":null},{"name":"reserved0","unit":"","type":"u32","storage":4,"defaultValue":null,"isSimpleType":true,"typicalMin":null,"typicalMax":null},{"name":"reserved1","unit":"","type":"u32","storage":4,"defaultValue":null,"isSimpleType":true,"typicalMin":null,"typicalMax":null},{"name":"reserved2","unit":"","type":"u32","storage":4,"defaultValue":null,"isSimpleType":true,"typicalMin":null,"typicalMax":null},{"name":"reserved3","unit":"","type":"u32","storage":4,"defaultValue":null,"isSimpleType":true,"typicalMin":null,"typicalMax":null},{"name":"page_data","unit":"","type":"bytes","storage":0,"defaultValue":null,"isSimpleType":true,"typicalMin":null,"typicalMax":null}]},{"kind":"report","name":"page_data","identifier":128,"description":"Use to send flashing data. A physical page is split into `chunk_max + 1` chunks, where `chunk_no = 0 ... chunk_max`.\nEach chunk is stored at `page_address + page_offset`. `page_address` has to be equal in all chunks,\nand is included in response.\nOnly the last chunk causes writing to flash and elicits response.\n\nErrors not listed are also possible. Errors larger than `0xffff` indicate de-synchronization on chunk numbers.","derived":null,"fields":[{"name":"session_id","unit":"","type":"u32","storage":4,"defaultValue":null,"isSimpleType":true,"typicalMin":null,"typicalMax":null},{"name":"page_error","unit":"","type":"Error","storage":4,"defaultValue":null,"isSimpleType":null,"typicalMin":null,"typicalMax":null},{"name":"page_address","unit":"","type":"u32","storage":4,"defaultValue":null,"isSimpleType":true,"typicalMin":null,"typicalMax":null}]}],"source":"# Bootloader\n\n    identifier: 0x1ffa9948\n\nAllows flashing (reprogramming) devices over JACDAC.\n\n## Commands\n\n    command info @ announce { }\n    report {\n        service_class: u32\n        page_size: u32 bytes\n        flashable_size: u32 bytes\n        device_class: u32\n    }\n\nThe `service_class` is always `0x1ffa9948`. The `device_class` identifies the kind of firmware\nthat \"fits\" this device.\n\n    command set_session @ 0x81 {\n        session_id: u32\n    }\n    report {\n        session_id: u32\n    }\n\nThe flashing host should generate a random id, and use this command to set it.\n\n    enum Error : u32 {\n        NoError = 0\n        PacketTooSmall = 1\n        OutOfFlashableRange = 2\n        InvalidPageOffset = 3\n        NotPageAligned = 4\n    }\n    command page_data @ 0x80 {\n        page_address: u32\n        page_offset: u16\n        chunk_no: u8\n        chunk_max: u8\n        session_id: u32\n        reserved0: u32\n        reserved1: u32\n        reserved2: u32\n        reserved3: u32\n        page_data: bytes\n    }\n    report {\n        session_id: u32\n        page_error: Error\n        page_address: u32\n    }\n\nUse to send flashing data. A physical page is split into `chunk_max + 1` chunks, where `chunk_no = 0 ... chunk_max`.\nEach chunk is stored at `page_address + page_offset`. `page_address` has to be equal in all chunks,\nand is included in response.\nOnly the last chunk causes writing to flash and elicits response.\n\nErrors not listed are also possible. Errors larger than `0xffff` indicate de-synchronization on chunk numbers.\n"}}}}