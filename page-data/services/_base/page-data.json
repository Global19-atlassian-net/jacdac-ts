{"componentChunkName":"component---src-templates-service-mdx","path":"/services/_base/","result":{"pageContext":{"frontmatter":{},"node":{"name":"Common registers and commands","shortName":"base","shortId":"_base","classIdentifier":536870897,"extends":[],"notes":{"short":"Service specification will always list explicitly registers and commands defined here.\nThey can be listed with say `@ intensity` instead of `@ 0x01`."},"packets":[{"kind":"command","name":"announce","identifier":0,"description":"Enumeration data for control service; service-specific advertisement data otherwise.\nControl broadcasts it automatically every 500ms, but other service have to be queried to provide it.","derived":null},{"kind":"report","name":"announce","identifier":0,"description":"Enumeration data for control service; service-specific advertisement data otherwise.\nControl broadcasts it automatically every 500ms, but other service have to be queried to provide it.","derived":null},{"kind":"command","name":"get_register","identifier":4096,"description":"Registers number `N` is fetched by issuing command `0x1000 | N`.\nThe report format is the same as the format of the register.","derived":null},{"kind":"report","name":"get_register","identifier":4096,"description":"Registers number `N` is fetched by issuing command `0x1000 | N`.\nThe report format is the same as the format of the register.","derived":null},{"kind":"command","name":"set_register","identifier":8192,"description":"Registers number `N` is set by issuing command `0x2000 | N`, with the format\nthe same as the format of the register.","derived":null},{"kind":"report","name":"event","identifier":1,"description":"Event from sensor or a broadcast service.","derived":null},{"kind":"command","name":"calibrate","identifier":2,"description":"Request to calibrate a sensor. The report indicates the calibration is done.","derived":null},{"kind":"report","name":"calibrate","identifier":2,"description":"Request to calibrate a sensor. The report indicates the calibration is done.","derived":null},{"kind":"command","name":"description","identifier":3,"description":"Request human-readable description of service.","derived":null},{"kind":"report","name":"description","identifier":3,"description":"Request human-readable description of service.","derived":null},{"kind":"rw","name":"intensity","identifier":1,"description":"This is either binary on/off (0 or non-zero), or can be gradual (eg. brightness of an RGB LED strip).","derived":null},{"kind":"rw","name":"value","identifier":2,"description":"The primary value of actuator (eg. servo pulse length, or motor duty cycle).","derived":null},{"kind":"rw","name":"max_power","identifier":7,"description":"Limit the power drawn by the service, in mA.","derived":null},{"kind":"rw","name":"is_streaming","identifier":3,"description":"Enables/disables broadcast streaming","derived":null},{"kind":"rw","name":"streaming_interval","identifier":4,"description":"Period between packets of data when streaming in milliseconds.","derived":null},{"kind":"ro","name":"reading","identifier":257,"description":"Read-only value of the sensor, also reported in streaming.","derived":null},{"kind":"rw","name":"low_threshold","identifier":5,"description":"Thresholds for event generation for event generation for analog sensors.","derived":null},{"kind":"rw","name":"high_threshold","identifier":6,"description":"Thresholds for event generation for event generation for analog sensors.","derived":null}],"source":"# Common registers and commands\n\n    camel: base\n\nService specification will always list explicitly registers and commands defined here.\nThey can be listed with say `@ intensity` instead of `@ 0x01`.\n\n## Commands\n\nCommand codes are subdivided as follows:\n* Commands `0x000-0x07f` - common to all services\n* Commands `0x080-0xeff` - defined per-service\n* Commands `0xf00-0xfff` - reserved for implementation\n\nCommands follow.\n\n    command announce @ 0x00 { }\n    report { ... }\n\nEnumeration data for control service; service-specific advertisement data otherwise.\nControl broadcasts it automatically every 500ms, but other service have to be queried to provide it.\n\n    command get_register @ 0x1000 {}\n    report { ... }\n\nRegisters number `N` is fetched by issuing command `0x1000 | N`.\nThe report format is the same as the format of the register.\n\n    command set_register @ 0x2000 { ... }\n\nRegisters number `N` is set by issuing command `0x2000 | N`, with the format\nthe same as the format of the register.\n\n    report event @ 0x01 {\n        event_id: u32\n        event_argument: u32\n    }\n\nEvent from sensor or a broadcast service. \n\n    command calibrate @ 0x02 { }\n    report { }\n\nRequest to calibrate a sensor. The report indicates the calibration is done.\n\n    command description @ 0x03 { }\n    report {\n        text: string\n    }\n\nRequest human-readable description of service.\n\n## Registers\n\nRegister codes are subdivided as follows:\n* Registers `0x001-0x07f` - r/w common to all services\n* Registers `0x080-0x0ff` - r/w defined per-service\n* Registers `0x100-0x17f` - r/o common to all services\n* Registers `0x180-0x1ff` - r/o defined per-service\n* Registers `0x200-0xeff` - custom, defined per-service\n* Registers `0xf00-0xfff` - reserved for implementation, should not be seen on the wire\n\nThe types listed are typical. Check spec for particular service for exact type,\nand a service-specific name for a register (eg. `value` could be `pulse_length`).\nAll registers default to `0` unless otherwise indicated.\n\n    rw intensity: u32 @ 0x01\n\nThis is either binary on/off (0 or non-zero), or can be gradual (eg. brightness of an RGB LED strip).\n\n    rw value: i32 @ 0x02\n\nThe primary value of actuator (eg. servo pulse length, or motor duty cycle).\n\n    rw max_power = 500: u16 mA @ 0x07\n\nLimit the power drawn by the service, in mA.\n\n    rw is_streaming: bool @ 0x03\n\nEnables/disables broadcast streaming\n\n    rw streaming_interval = 100: u32 ms @ 0x04\n\nPeriod between packets of data when streaming in milliseconds.\n\n    ro reading: i32 @ 0x101\n\nRead-only value of the sensor, also reported in streaming.\n\n    rw low_threshold: i32 @ 0x05\n    rw high_threshold: i32 @ 0x06\n\nThresholds for event generation for event generation for analog sensors.\n\n"}}}}