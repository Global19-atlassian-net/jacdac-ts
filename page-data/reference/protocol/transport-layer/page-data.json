{"componentChunkName":"component---src-components-spec-tsx","path":"/reference/protocol/transport-layer/","result":{"data":{"mdx":{"id":"5d82414b-f7d3-5663-9206-de437b8b84ae","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Transport Layer\",\n  \"order\": 8\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"transport-layer\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#transport-layer\",\n    \"aria-label\": \"transport layer permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Transport Layer\"), mdx(\"p\", null, \"A device's presence/absence on the bus is signified by the presence/absence of advertising packets containing its device identifier, which should be sent every 500 milliseconds. If a client of a JACDAC device does not receive an advertisement from the device for several advertisement periods (1-2 seconds), it should assume the device has left the bus. If the device rejoins the bus, it may present a different list of services. In fact, devices are free to change the list of services they advertise at any time.\"), mdx(\"h2\", {\n    \"id\": \"jacdac-frames-packets-and-service-indices\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#jacdac-frames-packets-and-service-indices\",\n    \"aria-label\": \"jacdac frames packets and service indices permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"JACDAC frames, packets and service indices\"), mdx(\"p\", null, \"A JACDAC frame contains a list of JACDAC packets (of length at least one), which all share the same device identifier and flags (see the logical description of a JACDAC packet below). The frame also contains a cyclic redundancy code (CRC). If the device identifier of the frame matches the device's identifier, then the device sends an acknowledgement containing the frame's CRC (JD_SERVICE_NUMBER_CRC_ACK).\"), mdx(\"p\", null, \"A JACDAC packet is described by the following structure:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-c\"\n  }), \"struct {\\n    uint8_t flags;\\n    uint64_t device_identifier;\\n    uint8_t service_size;         // size of the data payload\\n    uint8_t service_index;        // the index into the device's advertised list of services\\n    uint16_t service_command;\\n    uint8_t data[0];\\n}\\n\")), mdx(\"p\", null, \"The above structure omits the details about physical transmission of JACDAC packets over the wire and the packing of multiple packets within frames. For more information, see \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"../physical-layer/sws\"\n  }), \"the single wire serial protocol\"), \".\"), mdx(\"p\", null, \"A device will generally maintain device-specific state for each of the services that it supports. This state should be kept in an array, where each array entry contains the service class and (a pointer to) the device-specific state for that service. When a device advertises its service classes they are presented in the same order as in the list.  This allows clients of the device to refer to one of its services by list index (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"service_index\"), \", an 8 bit quantity) instead of service class (a 32 bit quantity). The zero index (service number) is reserved for the control service. \"), mdx(\"h3\", {\n    \"id\": \"flags\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#flags\",\n    \"aria-label\": \"flags permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"flags\"), mdx(\"p\", null, \"A packet contains only one device identifier (rather than both source and destination identifiers, as in IP). If the lowest bit of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flags\"), \" is set, the packet is a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"command packet\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"device_identifier\"), \" is the destination device receiving the packet; otherwise, the packet is a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"report packet\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"device_identifier\"), \" is the source device broadcasting information on the bus. Read more about command and report packets in the next section.\"), mdx(\"p\", null, \"If the second bit of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flags\"), \" is set\"), mdx(\"p\", null, \"If the third bit of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flags\"), \" is set (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"multicast commands\"), \"), then the low order 32 bits of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"device_identifier\"), \" field are treated as a service class. The command is then directed to all services with that service class.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Flag bit\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Interpretation\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"0x01\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"if set, the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"device_identifier\"), \" is the recipient of command; if clear, the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"device_identifier\"), \" is the sender of a report;\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"0x02\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"if set, an ACK should be issued with CRC\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"0x04\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"if set, the device_identifier contains target service class number (multicast)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"0x80\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"if set, the packet comes from JACDAC vNext and should be ignored by the current implementation\")))), mdx(\"h2\", {\n    \"id\": \"acks\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#acks\",\n    \"aria-label\": \"acks permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Acks\"), mdx(\"p\", null, \"If a frame is received by the control layer, and is then routed correctly,\\nan ACK may need to be sent.\\nThis only applies when frame contains command packets,\\ndevice identifier equals our device identifier,\\nand the second bit of frame flags is set.\"), mdx(\"p\", null, \"ACK packet uses our device identifier, service number of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0x3f\"), \",\\nand uses the CRC of the packet being acknowledged as the service command.\\nThe payload is zero-sized.\"), mdx(\"p\", null, \"All devices, except for the most resource-constrained bootloaders,\\nshould be able to send ACKs.\\nThey should indicate that in their advertisement packet.\"), mdx(\"h2\", {\n    \"id\": \"pipes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#pipes\",\n    \"aria-label\": \"pipes permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Pipes\"), mdx(\"p\", null, \"Pipes are application-level mechanism for establishing reliable one- and two-way\\npoint-to-point data links.\"), mdx(\"p\", null, \"Typical packet loss in JACDAC networks is well under 1%.\\nAnything that can withstand such packet loss \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"should not\"), \" be done over a pipe,\\nas pipes have quite big overhead.\"), mdx(\"p\", null, \"Typical applications where pipes should be used:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a WiFi service, where the pipe represents a TCP connection\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"when a response to a command doesn't fit in one packet (eg. WiFi scan results)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"when events need to be delivered reliably (eg., RFID reader)\")), mdx(\"p\", null, \"Pipes should generally not be used for:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"streaming sensor data (sensor events are OK)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"video data\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"audio data\")), mdx(\"p\", null, \"The way to initially establish a pipe depends on service, but typically\\ndevice A would send a command to device B to establish a pipe.\\nDevice A would include its device identifier and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"port\"), \"\\n(a 9 bit number of A's choosing; there would normally be one port per pipe) in the command.\\nIf a two-way communication is desired, device B could then state the port on its side.\"), mdx(\"p\", null, \"Both devices can then start sending commands to their respective ports.\\nThe pipe commands use a fixed service number of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0x3e\"), \" and set the require-ACK\\nflag on frames.\\nThe service command is split as follows:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), \"Bits\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), \"4:0\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Wrap around packet counter\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), \"6:5\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Content type\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), \"15:7\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Port number\")))), mdx(\"p\", null, \"The packet counter starts at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0x0\"), \" goes up to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0x1f\"), \", and then back to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0x0\"), \".\\nRationale: there can be up to 30 non-empty packets in a frame.\"), mdx(\"p\", null, \"Content type is:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0\"), \" for regular pipe data\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"1\"), \" for regular pipe data after which the pipe is to be closed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"2\"), \" for service-specific out-of-band meta-data\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"3\"), \" is reserved\")), mdx(\"p\", null, \"The sending protocol is:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"wait for any data that needs to be sent over the pipe\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"send it as a command; wait for ACK\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"if we timeout waiting for ACK, repeat previous step\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"if we repeated 10 times already, close the pipe\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"increment the pipe counter\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"go back to the first step\")), mdx(\"p\", null, \"The wait for ACK should follow exponential back-off, starting with 1ms up to 1024ms.\"), mdx(\"p\", null, \"The receiving protocol keeps a counter for each pipe. This counter starts at 0.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"when a pipe command is received, ACK it (this is usually done generically, not only for pipes)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"if stored counter for pipe doesn't match the counter in the packet, drop the packet\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"increment stored counter\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"process data in packet\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"repeat\")), mdx(\"p\", null, \"The protocol above has an effective window of 1.\\nThe counter allows increasing that up to 31, but this would require dealing with\\nmultiple packets per frame and is currently out of scope.\"), mdx(\"p\", null, \"Pipes should be considered closed when the device at the other end resets.\"), mdx(\"p\", null, \"TODO: Zero-length pipe commands can be sent as keep-alive packets.\\nIs this needed?\"), mdx(\"p\", null, \"Note that pipes are transmit streams of JACDAC packets, not streams of bytes.\\nThey should not be recombined at any layer in the implementation.\\nFor example, a command that returns a list of things can send each thing in a separate\\npipe packet, without any additional info about how to chunk the data\\n(provided each thing fits in a packet).\\nMultiple packets can be grouped in a frame, but are still handled separately at the\\ndestination.\"), mdx(\"h2\", {\n    \"id\": \"event-subscriptions\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#event-subscriptions\",\n    \"aria-label\": \"event subscriptions permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Event subscriptions\"), mdx(\"p\", null, \"A device like accelerometer can send events eg. when a 2g shock is detected,\\nwhen it's moved face-down, etc.\\nThese events a normally just broadcast on the bus, using standard command \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0x001\"), \".\"), mdx(\"p\", null, \"For reliable event delivery, a pipe can be established, and events delivered\\nover that pipe.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Transport Layer"}}},"pageContext":{"id":"5d82414b-f7d3-5663-9206-de437b8b84ae"}},"staticQueryHashes":["2214083594","2214083594","2270080012","2270080012","2461311362","2461311362","2744294623","2744294623","3159585216","3159585216","413816803","413816803","63159454","63159454"]}