{"version":3,"sources":["webpack:///./src/pages/tools/makecode-sim.tsx"],"names":["ReadingItem","props","register","expanded","onExpanded","service","deviceName","specification","useDeviceName","device","breakPoints","xs","humanValue","useRegisterHumanValue","item","onClick","title","name","subheader","in","variant","ReadingGrid","bus","useContext","JACDACContext","useState","undefined","setExpanded","readingRegisters","useChange","devices","map","services","find","srv","isSensor","readingRegister","filter","reg","container","spacing","key","id","i","Page","rawTheme","createMuiTheme","palette","primary","main","secondary","theme","responsiveFontSizes","dashboard"],"mappings":"8FAAA,4PAYMA,EAAc,SAACC,GAA+E,IACxFC,EAAmCD,EAAnCC,SAAUC,EAAyBF,EAAzBE,SAAUC,EAAeH,EAAfG,WACpBC,EAA2BH,EAA3BG,QACFC,GAD6BJ,EAAlBK,cACEC,YAAcH,EAAQI,SACnCC,EAAgCP,EAAW,CAAEQ,GAAI,IACjD,CAAEA,GAAI,GACNC,EAAaC,YAAsBX,GAEzC,OAAO,kBAAC,IAAD,eAAMY,MAAI,GAAKJ,GAClB,kBAAC,IAAD,CAAMK,SAAUZ,GAAYC,GACxB,kBAAC,IAAD,CAAYY,MAAOb,EAAWE,EAAQY,KAAOL,EACzCM,UAAWZ,IAEf,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUa,GAAIhB,GACV,kBAAC,IAAD,CAAYiB,QAAQ,MAAMR,QAOxCS,EAAc,WAAM,IACdC,EAAQC,qBAA2BC,KAAnCF,IADc,EAEUG,wBAAcC,GAAvCvB,EAFe,KAELwB,EAFK,KAGhBC,EAAmBC,YAAUP,GAAK,SAAAA,GAAG,OACvCA,EAAIQ,UAAUC,KAAI,SAAAtB,GAAM,uBAAIA,EACvBuB,WAAWC,MAAK,SAAAC,GAAG,OAAIC,YAASD,EAAI3B,yBADjB,aAAI,EAEtB6B,mBACJC,QAAO,SAAAC,GAAG,QAAMA,QAEtB,OAAO,kBAAC,IAAD,CAAMC,WAAS,EAACC,QAAS,GAC3BZ,EAAiBG,KAAI,SAAAO,GAAG,OAAI,kBAACtC,EAAD,CAAayC,IAAKH,EAAII,GAAIxC,SAAUoC,EAC7DnC,SAAUmC,IAAQnC,EAClBC,YAJmBuC,EAIWL,EAJA,kBAAMX,EAAYgB,OAA9B,IAACA,OAQhB,SAASC,IACpB,IAAMC,EAAWC,YAAe,CAC5BC,QAAS,CACLC,QAAS,CACLC,KAAM,WAEVC,UAAW,CACPD,KAAM,cAIZE,EAAQC,YAAoBP,GAClC,OAAO,kBAAC,IAAD,CAAcM,MAAOA,GACxB,kBAAC,IAAD,CAAcE,WAAW,IACzB,kBAAChC,EAAD","file":"component---src-pages-tools-makecode-sim-tsx-0cbbeeaeab0f849e022d.js","sourcesContent":["import React, { useContext, useState } from \"react\"\nimport { Card, CardContent, CardHeader, Collapse, createMuiTheme, Grid, GridSize, responsiveFontSizes, Typography } from \"@material-ui/core\";\nimport ThemedLayout from \"../../components/ThemedLayout\";\nimport JDomTreeView from \"../../components/JDomTreeView\";\nimport { JDService } from \"../../../../src/jdom/service\";\nimport useDeviceName from \"../../components/useDeviceName\";\nimport { JDRegister } from \"../../../../src/jdom/register\";\nimport { useRegisterHumanValue } from \"../../jacdac/useRegisterValue\";\nimport useChange from \"../../jacdac/useChange\";\nimport JACDACContext, { JDContextProps } from \"../../../../src/react/Context\";\nimport { isSensor } from \"../../../../src/jdom/spec\";\n\nconst ReadingItem = (props: { register: JDRegister, expanded: boolean, onExpanded: () => void }) => {\n    const { register, expanded, onExpanded } = props;\n    const { service, specification } = register;\n    const deviceName = useDeviceName(service.device);\n    const breakPoints: { xs: GridSize } = expanded ? { xs: 12 }\n        : { xs: 6 };\n    const humanValue = useRegisterHumanValue(register)\n\n    return <Grid item {...breakPoints}>\n        <Card onClick={!expanded && onExpanded}>\n            <CardHeader title={expanded ? service.name : humanValue}\n                subheader={deviceName}\n            />\n            <CardContent>\n                <Collapse in={expanded}>\n                    <Typography variant=\"h1\">{humanValue}</Typography>\n                </Collapse>\n            </CardContent>\n        </Card>\n    </Grid>\n}\n\nconst ReadingGrid = () => {\n    const { bus } = useContext<JDContextProps>(JACDACContext)\n    const [expanded, setExpanded] = useState<any>(undefined)\n    const readingRegisters = useChange(bus, bus =>\n        bus.devices().map(device => device\n            .services().find(srv => isSensor(srv.specification))\n            ?.readingRegister\n        ).filter(reg => !!reg))\n    const handleSetExpanded = (i: any) => () => setExpanded(i)\n    return <Grid container spacing={1}>\n        {readingRegisters.map(reg => <ReadingItem key={reg.id} register={reg}\n            expanded={reg === expanded}\n            onExpanded={handleSetExpanded(reg)} />)}\n    </Grid>\n}\n\nexport default function Page() {\n    const rawTheme = createMuiTheme({\n        palette: {\n            primary: {\n                main: '#2e7d32',\n            },\n            secondary: {\n                main: '#ffc400',\n            },\n        }\n    })\n    const theme = responsiveFontSizes(rawTheme);\n    return <ThemedLayout theme={theme}>\n        <JDomTreeView dashboard={true} />\n        <ReadingGrid />\n    </ThemedLayout>\n}\n"],"sourceRoot":""}